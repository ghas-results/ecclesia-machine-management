// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protobuffers for describing a Redfish topology configuration.
//
// These messages are used for constructing the NodeTopology. The Version 2
// topology library uses the proto messages to query all of the required
// resources based on resource type

syntax = "proto3";

package ecclesia;

import "google/protobuf/timestamp.proto";

// Status.HealthRollup is a Redfish property that can be used to signal various
// resource error and/or state propagation between interconnected resources in
// the Redfish tree. This error or state condition information is presented as a
// set of conditions with messages from a message registry, with a message
// containing various arguments as defined in the registry on per-message-type
// basis.
//
// The proto representation here can be considered a partial enumeration of
// supported message types from the ResourceEvent message registry, as detailed
// in
// https://www.dmtf.org/sites/default/files/standards/documents/DSP2065_2022.1.pdf.
// This proto may be expanded as more message types are supported or as more
// information relevant to node topology (e.g. devpaths from OriginOfCondition
// URI) are needed by clients.

message HealthRollup {
  // Each of the supported cases has two message args.
  // Source: https://redfish.dmtf.org/registries/ResourceEvent.1.2.1.json
  message ResourceEvent {
    message ErrorsDetected {
      string resource_identifier = 1;
      string error_type = 2;
    }
    message StateChange {
      string resource_identifier = 1;
      string state_change = 2;
    }
    message ThresholdExceeded {
      string resource_identifier = 1;
      double threshold = 2;
    }

    // Supported ResourceEvent message types
    oneof event_type {
      ErrorsDetected errors_detected = 1;
      StateChange state_change = 2;
      ThresholdExceeded threshold_exceeded = 3;
    }
    // Event Severity (e.g. Critical, Warning)
    string severity = 4;
    // Time at which the event was detected.
    google.protobuf.Timestamp timestamp = 5;
  }
  // Multiple conditions may be present for a given resource.
  repeated ResourceEvent resource_events = 1;
}