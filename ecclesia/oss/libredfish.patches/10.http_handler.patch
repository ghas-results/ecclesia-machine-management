Add ability to provide different HTTP handler

New functions createServiceEnumeratorAsyncExt and createServiceEnumeratorExt
are added that take a new serviceHttpHandler argument that let's the caller
provide a different HTTP handler to use instead of the default Curl.

An important part of the patch is the ability to provide a new default
timeout: The provided HTTP handler may have timing requirements that
far exceed the current default.

diff --git a/include/redfishRawAsync.h b/include/redfishRawAsync.h
index 171cac1..7608f18 100644
--- include/redfishRawAsync.h
+++ include/redfishRawAsync.h
@@ -16,98 +16,9 @@
 #ifndef _REDFISH_RAW_ASYNC_H_
 #define _REDFISH_RAW_ASYNC_H_
 
+#include <redfishTypes.h>
 #include <redfishService.h>
 
-/**
- * @brief A representation of an HTTP header.
- *
- * An HTTP header structure list.
- */
-typedef struct _httpHeader
-{
-    /** The header name **/
-    char* name;
-    /** The header value **/
-    char* value;
-    /** A link to the next header in the list **/
-    struct _httpHeader* next;
-} httpHeader;
-
-/**
- * @brief An HTTP method.
- *
- * A representation of an HTTP method.
- */
-typedef enum _httpMethod
-{
-    /** Get an HTTP resource **/
-	HTTP_GET,
-    /** Get the headers for an HTTP resource **/
-	HTTP_HEAD,
-    /** Write/Create an HTTP resource **/
-	HTTP_POST,
-    /** Write an HTTP resource **/
-	HTTP_PUT,
-    /** Delete an HTTP resource **/
-    HTTP_DELETE,
-    /** Get the communication options for an HTTP resource **/
-	HTTP_OPTIONS,
-    /** Write part of an HTTP resource **/
-	HTTP_PATCH
-} httpMethod;
-
-/**
- * @brief An asynchronous HTTP(s) request.
- *
- * A structure with all the information needed to start an HTTP(s) request.
- */
-typedef struct _asyncHttpRequest
-{
-    /** The url to send the request to **/
-    char* url;
-    /** The HTTP method to use **/
-    httpMethod method;
-    /** The timeout for the operation, 0 means never timeout **/
-    unsigned long timeout;
-    /** Headers to send or NULL for none **/
-    httpHeader* headers;
-    /** The size of the request payload body **/
-    size_t bodySize;
-    /** The request payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
-    char* body;
-} asyncHttpRequest;
-
-/**
- * @brief An asynchronous HTTP(s) response.
- *
- * A structure with all the information returned by the server.
- */
-typedef struct _asyncHttpResponse
-{
-    /** 0 on success, another value if the connection failed **/
-    int connectError;
-    /** The HTTP response code sent by the server **/
-    long httpResponseCode; //Probably way too big, but this is curl's native type
-    /** Headers sent by the server **/
-    httpHeader* headers;
-    /** The size of the body of the payload sent by the server **/
-    size_t bodySize;
-    /** The response payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
-    char* body;
-} asyncHttpResponse;
-
-/**
- * @brief A callback when the request is finished.
- *
- *  A function callback called when the request has finished.
- *
- * @param request The request that was sent. The function should free this.
- * @param response The response that was received. The function should free this.
- * @param context The context that was passed to startRawAsyncRequest. It is up to the consumer to determine if this should be freed or not
- * @see startRawAsyncRequest
- */
-typedef void (*asyncRawCallback)(asyncHttpRequest* request, asyncHttpResponse* response, void* context);
-
 /**
  * @brief Create an asyncHttpRequest struct.
  *
diff --git a/include/redfishService.h b/include/redfishService.h
index 2cea318..c29689f 100644
--- include/redfishService.h
+++ include/redfishService.h
@@ -15,6 +15,7 @@
 #define _REDFISH_SERVICE_H_
 #include "jansson.h"
 #include "curl/curl.h"
+#include <redfishTypes.h>
 #include <stdbool.h>
 
 #ifdef _MSC_VER
@@ -164,11 +165,13 @@ typedef void (*redfishEventCallback)(redfishPayload* event, enumeratorAuthentica
  * @param auth The authentication method to use for the redfish service. If NULL
  * the connection will be made with no authentication
  * @param flags Any extra flags to pass to the service
+ * @param handler If non-NULL, and handler->start_request_handler is non-NULL, then call start_request_handler to perform HTTP requests. Otherwise use the default Curl implementation. Handler is consumed even on failure; in other words, if on failure handler->cleanup_request_handler_context is non-NULL, then it will be called.
  * @return A new redfish service structure representing the connection.
  * @see serviceDecRef
  * @see serviceDecRefAndWait
  */
 REDFISH_EXPORT redfishService* createServiceEnumerator(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags);
+REDFISH_EXPORT redfishService* createServiceEnumeratorExt(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, const serviceHttpHandler* handler);
 /**
  * @brief Update the host a service is connecting to.
  *
@@ -341,13 +344,6 @@ REDFISH_EXPORT void serviceDecRefAndWait(redfishService* service);
 /** There was an error parsing the returned payload **/
 #define REDFISH_ERROR_PARSING 0xFFFE
 
-/** Accept any type of response **/
-#define REDFISH_ACCEPT_ALL  0xFFFFFFFF
-/** Accept a JSON response **/
-#define REDFISH_ACCEPT_JSON 1
-/** Accept an XML response **/
-#define REDFISH_ACCEPT_XML  2
-
 /** Try Registering for events through SSE, if supported will be tried first **/
 #define REDFISH_REG_TYPE_SSE  1
 /** Try Registering for events through EventDestination POST **/
@@ -372,15 +368,6 @@ typedef int SOCKET;
 /** Open a POSIX domain socket, socketName should be specified **/
 #define REDFISH_EVENT_FRONT_END_DOMAIN_SOCKET 4
 
-/** Extra async options for the call **/
-typedef struct
-{
-    /** The type of response payload to accept **/
-    int accept;
-    /** The timeout for the operation, 0 means never timeout **/
-    unsigned long timeout;
-} redfishAsyncOptions;
-
 typedef struct
 {
     /** Event Registration Types to try **/
@@ -438,12 +425,14 @@ typedef void (*redfishCreateAsyncCallback)(redfishService* service, void* contex
  * @param flags Any extra flags to pass to the service
  * @param callback The callback to call when the service is created
  * @param context The context to pass to the callback
+ * @param handler If non-NULL, and handler->start_request_handler is non-NULL, then call start_request_handler to perform HTTP requests. Otherwise use the default Curl implementation. Handler is consumed even on failure; in other words, if on failure handler->cleanup_request_handler_context is non-NULL, then it will be called.
  * @return True if the callback will be called, false otherwise.
  * @see createServiceEnumerator
  * @see serviceDecRef
  * @see serviceDecRefAndWait
  */
 REDFISH_EXPORT bool createServiceEnumeratorAsync(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context);
+REDFISH_EXPORT bool createServiceEnumeratorAsyncExt(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler);
 
 /**
  * Callback for Redfish async calls
diff --git a/include/redfishTypes.h b/include/redfishTypes.h
new file mode 100644
index 0000000..86ecfb8
--- /dev/null
+++ include/redfishTypes.h
@@ -0,0 +1,176 @@
+//----------------------------------------------------------------------------
+// Copyright Notice:
+// Copyright 2017-2021 DMTF. All rights reserved.
+// License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libredfish/blob/master/LICENSE.md
+//----------------------------------------------------------------------------
+
+/**
+ * @file redfishTypes.h
+ * @brief File containing various types.
+ *
+ * This file exists to prevent circular dependencies between various headers.
+ * Types used by multiple headers are defined here.
+ */
+#ifndef _REDFISH_TYPES_H_
+#define _REDFISH_TYPES_H_
+
+#include <stdbool.h>
+#include <stddef.h>
+
+/**
+ * @brief A representation of an HTTP header.
+ *
+ * An HTTP header structure list.
+ */
+typedef struct _httpHeader
+{
+    /** The header name **/
+    char* name;
+    /** The header value **/
+    char* value;
+    /** A link to the next header in the list **/
+    struct _httpHeader* next;
+} httpHeader;
+
+/**
+ * @brief An HTTP method.
+ *
+ * A representation of an HTTP method.
+ */
+typedef enum _httpMethod
+{
+    /** Get an HTTP resource **/
+	HTTP_GET,
+    /** Get the headers for an HTTP resource **/
+	HTTP_HEAD,
+    /** Write/Create an HTTP resource **/
+	HTTP_POST,
+    /** Write an HTTP resource **/
+	HTTP_PUT,
+    /** Delete an HTTP resource **/
+    HTTP_DELETE,
+    /** Get the communication options for an HTTP resource **/
+	HTTP_OPTIONS,
+    /** Write part of an HTTP resource **/
+	HTTP_PATCH
+} httpMethod;
+
+/**
+ * @brief An asynchronous HTTP(s) request.
+ *
+ * A structure with all the information needed to start an HTTP(s) request.
+ */
+typedef struct _asyncHttpRequest
+{
+    /** The url to send the request to **/
+    char* url;
+    /** The HTTP method to use **/
+    httpMethod method;
+    /** The timeout for the operation, 0 means never timeout **/
+    unsigned long timeout;
+    /** Headers to send or NULL for none **/
+    httpHeader* headers;
+    /** The size of the request payload body **/
+    size_t bodySize;
+    /** The request payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
+    char* body;
+} asyncHttpRequest;
+
+/**
+ * @brief An asynchronous HTTP(s) response.
+ *
+ * A structure with all the information returned by the server.
+ */
+typedef struct _asyncHttpResponse
+{
+    /** 0 on success, another value if the connection failed **/
+    int connectError;
+    /** The HTTP response code sent by the server **/
+    long httpResponseCode; //Probably way too big, but this is curl's native type
+    /** Headers sent by the server **/
+    httpHeader* headers;
+    /** The size of the body of the payload sent by the server **/
+    size_t bodySize;
+    /** The response payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
+    char* body;
+} asyncHttpResponse;
+
+/**
+ * @brief A callback when the request is finished.
+ *
+ *  A function callback called when the request has finished.
+ *
+ * @param request The request that was sent. The function should free this.
+ * @param response The response that was received. The function should free this.
+ * @param context The context that was passed to startRawAsyncRequest. It is up to the consumer to determine if this should be freed or not
+ * @see startRawAsyncRequest
+ */
+typedef void (*asyncRawCallback)(asyncHttpRequest* request, asyncHttpResponse* response, void* context);
+
+/** Accept any type of response **/
+#define REDFISH_ACCEPT_ALL  0xFFFFFFFF
+/** Accept a JSON response **/
+#define REDFISH_ACCEPT_JSON 1
+/** Accept an XML response **/
+#define REDFISH_ACCEPT_XML  2
+
+/** Extra options async calls **/
+typedef struct
+{
+    /** The type of response payload to accept **/
+    int accept;
+    /** The timeout for the operation, 0 means never timeout **/
+    unsigned long timeout;
+} redfishAsyncOptions;
+
+/**
+ * @brief The function to call to queue a request to be performed.
+ *
+ * This function is called by startRawAsyncRequest to do the real work,
+ * startRawAsyncRequest is just a wrapper that calls this function. The
+ * default implementation uses Curl, but the user can provide a different
+ * library to perform HTTP requests via the handler argument to
+ * createServiceEnumeratorAsyncExt and createServiceEnumeratorExt.
+ *
+ * @param service The redfish service making the request.
+ * @param handler_context The request_handler_context passed in serviceHttpHandler.
+ * @param request The request to be performed.
+ * @param callback The function to call when the request has completed.
+ * @param callback_context The context that was passed to startRawAsyncRequest.
+ * @see serviceHttpHandler
+ * @see createServiceEnumeratorAsyncExt
+ * @see createServiceEnumeratorExt
+ * @see startRawAsyncRequest
+ */
+struct _redfishService;
+typedef bool (*startRequestHandler)(struct _redfishService* service, void* handler_context, asyncHttpRequest* request, asyncRawCallback callback, void* callback_context);
+
+/**
+ * @brief Free an http handler.
+ *
+ * Free the request_handler_context provided in serviceHttpHandler.
+ *
+ * @param context The context to free.
+ * @see serviceHttpHandler
+ */
+typedef void (*cleanupRequestHandlerContext)(void* context);
+
+/**
+ * @brief An HTTP request handler.
+ *
+ * This struct is the handler argument to createServiceEnumeratorAsyncExt and
+ * createServiceEnumeratorExt. It allows the user to provide their own HTTP
+ * implementation to use instead of the default Curl.
+ */
+typedef struct {
+    /** The function to call to start a request **/
+    startRequestHandler start_request_handler;
+    /** The function to call to delete request_handler_context, it may be NULL **/
+    cleanupRequestHandlerContext cleanup_request_handler_context;
+    /** Additional state to provide to start_request_handler **/
+    void* request_handler_context;
+    /** The default set of async options to use for this handler **/
+    redfishAsyncOptions default_async_options;
+} serviceHttpHandler;
+
+#endif
diff --git a/src/asyncRaw.c b/src/asyncRaw.c
index a1006d5..09f9d38 100644
--- src/asyncRaw.c
+++ src/asyncRaw.c
@@ -11,6 +11,7 @@
 #include <unistd.h>
 #endif
 
+#include "asyncRaw.h"
 #include "debug.h"
 #include "util.h"
 
@@ -88,7 +89,7 @@ typedef struct
     void* context;
 } asyncWorkItem;
 
-bool startRawAsyncRequest(redfishService* service, asyncHttpRequest* request, asyncRawCallback callback, void* context)
+bool defaultStartRawAsyncRequest(redfishService* service, void* handler_context, asyncHttpRequest* request, asyncRawCallback callback, void* context)
 {
     asyncWorkItem* workItem;
 
diff --git a/src/asyncRaw.h b/src/asyncRaw.h
new file mode 100644
index 0000000..37a68c1
--- /dev/null
+++ src/asyncRaw.h
@@ -0,0 +1,36 @@
+//----------------------------------------------------------------------------
+// Copyright Notice:
+// Copyright 2021 DMTF. All rights reserved.
+// License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libredfish/blob/master/LICENSE.md
+//----------------------------------------------------------------------------
+
+/**
+ * @file asyncRaw.h
+ * @brief File containing the default HTTP request implementation
+ *
+ * This file explains the interface for the default HTTP request implementation.
+ */
+#ifndef _ASYNC_RAW_H_
+#define _ASYNC_RAW_H_
+
+#include "internal_service.h"
+#include <redfishRawAsync.h>
+
+/**
+ * @brief Queue an HTTP request for subsequent processing.
+ *
+ *  This is the default implementation of startRequestHandler.
+ *
+ * @param service The redfish service used. This is used to maintain a queue and thread per service.
+ * @param handler_context An opaque pointer to user-specified state for implementing this function (unused in our case)
+ * @param request The request to send
+ * @param callback The function to call upon completion
+ * @param callback_context An opaque pointer to pass to the callback
+ * @return false if the request could not be initiated, true otherwise
+ * @see startRawAsyncRequest
+ * @see startRequestHandler
+ */
+bool defaultStartRawAsyncRequest(redfishService* service, void* handler_context, asyncHttpRequest* request, asyncRawCallback callback, void* callback_context);
+
+#endif
+/* vim: set tabstop=4 shiftwidth=4 ff=unix expandtab: */
diff --git a/src/internal_service.h b/src/internal_service.h
index 41d3599..f774953 100644
--- src/internal_service.h
+++ src/internal_service.h
@@ -21,6 +21,7 @@
 #ifndef NO_CZMQ
 #include <czmq.h>
 #endif
+#include <redfishTypes.h>
 #include "queue.h"
 #include "util.h"
 
@@ -115,6 +116,14 @@ typedef struct _redfishService {
     char *clientKeyFile;
     /** The certificate authority file **/
     char *caCertFile;
+    /** The function to call to start a request **/
+    startRequestHandler start_request_handler;
+    /** The function to call to delete request_handler_context, it may be NULL **/
+    cleanupRequestHandlerContext cleanup_request_handler_context;
+    /** Additional state to provide to start_request_handler **/
+    void* request_handler_context;
+    /** The default options to use **/
+    redfishAsyncOptions default_async_options;
 } redfishService;
 
 #endif
