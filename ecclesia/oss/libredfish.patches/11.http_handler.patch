Add ability to provide different HTTP handler

New functions createServiceEnumeratorAsyncExt and createServiceEnumeratorExt
are added that take a new serviceHttpHandler argument that let's the caller
provide a different HTTP handler to use instead of the default Curl.

diff --git include/redfishRawAsync.h new/redfishRawAsync.h
--- include/redfishRawAsync.h
+++ new/redfishRawAsync.h
@@ -16,99 +16,10 @@
 #ifndef _REDFISH_RAW_ASYNC_H_
 #define _REDFISH_RAW_ASYNC_H_
 
-#include <redfishService.h>
+#include "redfishTypes.h"
+#include "redfishService.h"
 
 /**
- * @brief A representation of an HTTP header.
- *
- * An HTTP header structure list.
- */
-typedef struct _httpHeader
-{
-    /** The header name **/
-    char* name;
-    /** The header value **/
-    char* value;
-    /** A link to the next header in the list **/
-    struct _httpHeader* next;
-} httpHeader;
-
-/**
- * @brief An HTTP method.
- *
- * A representation of an HTTP method.
- */
-typedef enum _httpMethod
-{
-    /** Get an HTTP resource **/
-	HTTP_GET,
-    /** Get the headers for an HTTP resource **/
-	HTTP_HEAD,
-    /** Write/Create an HTTP resource **/
-	HTTP_POST,
-    /** Write an HTTP resource **/
-	HTTP_PUT,
-    /** Delete an HTTP resource **/
-    HTTP_DELETE,
-    /** Get the communication options for an HTTP resource **/
-	HTTP_OPTIONS,
-    /** Write part of an HTTP resource **/
-	HTTP_PATCH
-} httpMethod;
-
-/**
- * @brief An asynchronous HTTP(s) request.
- *
- * A structure with all the information needed to start an HTTP(s) request.
- */
-typedef struct _asyncHttpRequest
-{
-    /** The url to send the request to **/
-    char* url;
-    /** The HTTP method to use **/
-    httpMethod method;
-    /** The timeout for the operation, 0 means never timeout **/
-    unsigned long timeout;
-    /** Headers to send or NULL for none **/
-    httpHeader* headers;
-    /** The size of the request payload body **/
-    size_t bodySize;
-    /** The request payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
-    char* body;
-} asyncHttpRequest;
-
-/**
- * @brief An asynchronous HTTP(s) response.
- *
- * A structure with all the information returned by the server.
- */
-typedef struct _asyncHttpResponse
-{
-    /** 0 on success, another value if the connection failed **/
-    int connectError;
-    /** The HTTP response code sent by the server **/
-    long httpResponseCode; //Probably way too big, but this is curl's native type
-    /** Headers sent by the server **/
-    httpHeader* headers;
-    /** The size of the body of the payload sent by the server **/
-    size_t bodySize;
-    /** The response payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
-    char* body;
-} asyncHttpResponse;
-
-/**
- * @brief A callback when the request is finished.
- *
- *  A function callback called when the request has finished.
- *
- * @param request The request that was sent. The function should free this.
- * @param response The response that was received. The function should free this.
- * @param context The context that was passed to startRawAsyncRequest. It is up to the consumer to determine if this should be freed or not
- * @see startRawAsyncRequest
- */
-typedef void (*asyncRawCallback)(asyncHttpRequest* request, asyncHttpResponse* response, void* context);
-
-/**
  * @brief Create an asyncHttpRequest struct.
  *
  * This method creates an asyncHttpRequest struct and initializes the values per the parameters.
diff --git include/redfishService.h new/redfishService.h
--- include/redfishService.h
+++ new/redfishService.h
@@ -15,6 +15,7 @@
 #define _REDFISH_SERVICE_H_
 #include "jansson.h"
 #include "curl/curl.h"
+#include "redfishTypes.h"
 #include <stdbool.h>
 
 #ifdef _MSC_VER
@@ -164,11 +165,13 @@ typedef void (*redfishEventCallback)(red
  * @param auth The authentication method to use for the redfish service. If NULL
  * the connection will be made with no authentication
  * @param flags Any extra flags to pass to the service
+ * @param handler If non-NULL, and handler->start_request_handler is non-NULL, then call start_request_handler to perform HTTP requests. Otherwise use the default Curl implementation. Handler is consumed even on failure; in other words, if on failure handler->cleanup_request_handler_context is non-NULL, then it will be called.
  * @return A new redfish service structure representing the connection.
  * @see serviceDecRef
  * @see serviceDecRefAndWait
  */
 REDFISH_EXPORT redfishService* createServiceEnumerator(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags);
+REDFISH_EXPORT redfishService* createServiceEnumeratorExt(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, const serviceHttpHandler* handler);
 /**
  * @brief Update the host a service is connecting to.
  *
@@ -438,12 +441,14 @@ typedef void (*redfishCreateAsyncCallbac
  * @param flags Any extra flags to pass to the service
  * @param callback The callback to call when the service is created
  * @param context The context to pass to the callback
+ * @param handler If non-NULL, and handler->start_request_handler is non-NULL, then call start_request_handler to perform HTTP requests. Otherwise use the default Curl implementation. Handler is consumed even on failure; in other words, if on failure handler->cleanup_request_handler_context is non-NULL, then it will be called.
  * @return True if the callback will be called, false otherwise.
  * @see createServiceEnumerator
  * @see serviceDecRef
  * @see serviceDecRefAndWait
  */
 REDFISH_EXPORT bool createServiceEnumeratorAsync(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context);
+REDFISH_EXPORT bool createServiceEnumeratorAsyncExt(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler);
 
 /**
  * Callback for Redfish async calls
diff --git include/redfishTypes.h new/redfishTypes.h
new file mode 100644
--- /dev/null
+++ include/redfishTypes.h
@@ -0,0 +1,158 @@
+//----------------------------------------------------------------------------
+// Copyright Notice:
+// Copyright 2017-2021 DMTF. All rights reserved.
+// License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libredfish/blob/master/LICENSE.md
+//----------------------------------------------------------------------------
+
+/**
+ * @file redfishTypes.h
+ * @brief File containing various types.
+ *
+ * This file exists to prevent circular dependencies between various headers.
+ * Types used by multiple headers are defined here.
+ */
+#ifndef _REDFISH_TYPES_H_
+#define _REDFISH_TYPES_H_
+
+#include <stdbool.h>
+#include <stddef.h>
+
+/**
+ * @brief A representation of an HTTP header.
+ *
+ * An HTTP header structure list.
+ */
+typedef struct _httpHeader
+{
+    /** The header name **/
+    char* name;
+    /** The header value **/
+    char* value;
+    /** A link to the next header in the list **/
+    struct _httpHeader* next;
+} httpHeader;
+
+/**
+ * @brief An HTTP method.
+ *
+ * A representation of an HTTP method.
+ */
+typedef enum _httpMethod
+{
+    /** Get an HTTP resource **/
+	HTTP_GET,
+    /** Get the headers for an HTTP resource **/
+	HTTP_HEAD,
+    /** Write/Create an HTTP resource **/
+	HTTP_POST,
+    /** Write an HTTP resource **/
+	HTTP_PUT,
+    /** Delete an HTTP resource **/
+    HTTP_DELETE,
+    /** Get the communication options for an HTTP resource **/
+	HTTP_OPTIONS,
+    /** Write part of an HTTP resource **/
+	HTTP_PATCH
+} httpMethod;
+
+/**
+ * @brief An asynchronous HTTP(s) request.
+ *
+ * A structure with all the information needed to start an HTTP(s) request.
+ */
+typedef struct _asyncHttpRequest
+{
+    /** The url to send the request to **/
+    char* url;
+    /** The HTTP method to use **/
+    httpMethod method;
+    /** The timeout for the operation, 0 means never timeout **/
+    unsigned long timeout;
+    /** Headers to send or NULL for none **/
+    httpHeader* headers;
+    /** The size of the request payload body **/
+    size_t bodySize;
+    /** The request payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
+    char* body;
+} asyncHttpRequest;
+
+/**
+ * @brief An asynchronous HTTP(s) response.
+ *
+ * A structure with all the information returned by the server.
+ */
+typedef struct _asyncHttpResponse
+{
+    /** 0 on success, another value if the connection failed **/
+    int connectError;
+    /** The HTTP response code sent by the server **/
+    long httpResponseCode; //Probably way too big, but this is curl's native type
+    /** Headers sent by the server **/
+    httpHeader* headers;
+    /** The size of the body of the payload sent by the server **/
+    size_t bodySize;
+    /** The response payload body. char* is used for convience. Binary data can be passed and the bodySize parameter dictates the length **/
+    char* body;
+} asyncHttpResponse;
+
+/**
+ * @brief A callback when the request is finished.
+ *
+ *  A function callback called when the request has finished.
+ *
+ * @param request The request that was sent. The function should free this.
+ * @param response The response that was received. The function should free this.
+ * @param context The context that was passed to startRawAsyncRequest. It is up to the consumer to determine if this should be freed or not
+ * @see startRawAsyncRequest
+ */
+typedef void (*asyncRawCallback)(asyncHttpRequest* request, asyncHttpResponse* response, void* context);
+
+/**
+ * @brief The function to call to queue a request to be performed.
+ *
+ * This function is called by startRawAsyncRequest to do the real work,
+ * startRawAsyncRequest is just a wrapper that calls this function. The
+ * default implementation uses Curl, but the user can provide a different
+ * library to perform HTTP requests via the handler argument to
+ * createServiceEnumeratorAsyncExt and createServiceEnumeratorExt.
+ *
+ * @param service The redfish service making the request.
+ * @param handler_context The request_handler_context passed in serviceHttpHandler.
+ * @param request The request to be performed.
+ * @param callback The function to call when the request has completed.
+ * @param callback_context The context that was passed to startRawAsyncRequest.
+ * @see serviceHttpHandler
+ * @see createServiceEnumeratorAsyncExt
+ * @see createServiceEnumeratorExt
+ * @see startRawAsyncRequest
+ */
+struct _redfishService;
+typedef bool (*startRequestHandler)(struct _redfishService* service, void* handler_context, asyncHttpRequest* request, asyncRawCallback callback, void* callback_context);
+
+/**
+ * @brief Free an http handler.
+ *
+ * Free the request_handler_context provided in serviceHttpHandler.
+ *
+ * @param context The context to free.
+ * @see serviceHttpHandler
+ */
+typedef void (*cleanupRequestHandlerContext)(void* context);
+
+/**
+ * @brief An HTTP request handler.
+ *
+ * This struct is the handler argument to createServiceEnumeratorAsyncExt and
+ * createServiceEnumeratorExt. It allows the user to provide their own HTTP
+ * implementation to use instead of the default Curl.
+ */
+typedef struct {
+    /** The function to call to start a request **/
+    startRequestHandler start_request_handler;
+    /** The function to call to delete request_handler_context, it may be NULL **/
+    cleanupRequestHandlerContext cleanup_request_handler_context;
+    /** Additional state to provide to start_request_handler **/
+    void* request_handler_context;
+} serviceHttpHandler;
+
+#endif
diff --git src/asyncRaw.c new/asyncRaw.c
--- src/asyncRaw.c
+++ new/asyncRaw.c
@@ -11,6 +11,7 @@
 #include <unistd.h>
 #endif
 
+#include "asyncRaw.h"
 #include "debug.h"
 #include "util.h"
 
@@ -88,7 +89,7 @@ typedef struct
     void* context;
 } asyncWorkItem;
 
-bool startRawAsyncRequest(redfishService* service, asyncHttpRequest* request, asyncRawCallback callback, void* context)
+bool defaultStartRawAsyncRequest(redfishService* service, void* handler_context, asyncHttpRequest* request, asyncRawCallback callback, void* context)
 {
     asyncWorkItem* workItem;
 
diff --git src/asyncRaw.h new/asyncRaw.h
new file mode 100644
--- /dev/null
+++ src/asyncRaw.h
@@ -0,0 +1,36 @@
+//----------------------------------------------------------------------------
+// Copyright Notice:
+// Copyright 2021 DMTF. All rights reserved.
+// License: BSD 3-Clause License. For full text see link: https://github.com/DMTF/libredfish/blob/master/LICENSE.md
+//----------------------------------------------------------------------------
+
+/**
+ * @file asyncRaw.h
+ * @brief File containing the default HTTP request implementation
+ *
+ * This file explains the interface for the default HTTP request implementation.
+ */
+#ifndef _ASYNC_RAW_H_
+#define _ASYNC_RAW_H_
+
+#include "internal_service.h"
+#include "redfishRawAsync.h"
+
+/**
+ * @brief Queue an HTTP request for subsequent processing.
+ *
+ *  This is the default implementation of startRequestHandler.
+ *
+ * @param service The redfish service used. This is used to maintain a queue and thread per service.
+ * @param handler_context An opaque pointer to user-specified state for implementing this function (unused in our case)
+ * @param request The request to send
+ * @param callback The function to call upon completion
+ * @param callback_context An opaque pointer to pass to the callback
+ * @return false if the request could not be initiated, true otherwise
+ * @see startRawAsyncRequest
+ * @see startRequestHandler
+ */
+bool defaultStartRawAsyncRequest(redfishService* service, void* handler_context, asyncHttpRequest* request, asyncRawCallback callback, void* callback_context);
+
+#endif
+/* vim: set tabstop=4 shiftwidth=4 ff=unix expandtab: */
diff --git src/internal_service.h new/internal_service.h
--- src/internal_service.h
+++ new/internal_service.h
@@ -21,6 +21,7 @@
 #ifndef NO_CZMQ
 #include <czmq.h>
 #endif
+#include "redfishTypes.h"
 #include "queue.h"
 #include "util.h"
 
@@ -115,6 +116,12 @@ typedef struct _redfishService {
     char *clientKeyFile;
     /** The certificate authority file **/
     char *caCertFile;
+    /** The function to call to start a request **/
+    startRequestHandler start_request_handler;
+    /** The function to call to delete request_handler_context, it may be NULL **/
+    cleanupRequestHandlerContext cleanup_request_handler_context;
+    /** Additional state to provide to start_request_handler **/
+    void* request_handler_context;
 } redfishService;
 
 #endif
diff --git src/service.c new/service.c
--- src/service.c
+++ new/service.c
@@ -18,6 +18,7 @@
 #include "redfishEvent.h"
 #include "redfishRawAsync.h"
 
+#include "asyncRaw.h"
 #include "debug.h"
 #include "util.h"
 
@@ -41,11 +42,11 @@ redfishAsyncOptions gDefaultOptions = {
 };
 
 static void handleHostnameToRedfishService(const char* host, redfishService* service);
-static redfishService* createServiceEnumeratorNoAuth(const char* host, const char* rootUri, bool enumerate, unsigned int flags);
-static redfishService* createServiceEnumeratorBasicAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags);
-static redfishService* createServiceEnumeratorSessionAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags);
-static redfishService* createServiceEnumeratorToken(const char* host, const char* rootUri, const char* token, unsigned int flags);
-static redfishService* createServiceEnumeratorTlsAuth(const char* host, const char* rootUri, bool verifyPeer, bool verifyHostname, const char* clientCertFile, const char* clientKeyFile, const char* caCertFile, unsigned int flags);
+static redfishService* createServiceEnumeratorNoAuth(const char* host, const char* rootUri, bool enumerate, unsigned int flags, const serviceHttpHandler* handler);
+static redfishService* createServiceEnumeratorBasicAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, const serviceHttpHandler* handler);
+static redfishService* createServiceEnumeratorSessionAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, const serviceHttpHandler* handler);
+static redfishService* createServiceEnumeratorToken(const char* host, const char* rootUri, const char* token, unsigned int flags, const serviceHttpHandler* handler);
+static redfishService* createServiceEnumeratorTlsAuth(const char* host, const char* rootUri, bool verifyPeer, bool verifyHostname, const char* clientCertFile, const char* clientKeyFile, const char* caCertFile, unsigned int flags, const serviceHttpHandler* handler);
 static char* makeUrlForService(redfishService* service, const char* uri);
 static json_t* getVersions(redfishService* service, const char* rootUri);
 static char* getSSEUri(redfishService* service);
@@ -53,35 +54,35 @@ static char* getEventSubscriptionUri(red
 static void addStringToJsonObject(json_t* object, const char* key, const char* value);
 static redfishPayload* getPayloadFromAsyncResponse(asyncHttpResponse* response, redfishService* service);
 static unsigned char* base64_encode(const unsigned char* src, size_t len, size_t* out_len);
-static bool createServiceEnumeratorNoAuthAsync(const char* host, const char* rootUri, unsigned int flags, redfishCreateAsyncCallback callback, void* context);
-static bool createServiceEnumeratorBasicAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context);
-static bool createServiceEnumeratorSessionAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context);
-static bool createServiceEnumeratorTokenAsync(const char* host, const char* rootUri, const char* token, unsigned int flags, redfishCreateAsyncCallback callback, void* context);
+static bool createServiceEnumeratorNoAuthAsync(const char* host, const char* rootUri, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler);
+static bool createServiceEnumeratorBasicAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler);
+static bool createServiceEnumeratorSessionAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler);
+static bool createServiceEnumeratorTokenAsync(const char* host, const char* rootUri, const char* token, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler);
 static bool getVersionsAsync(redfishService* service, const char* rootUri, redfishCreateAsyncCallback callback, void* context);
 static char* getDestinationAddress(const char* addressInfo, SOCKET* socket);
 
-redfishService* createServiceEnumerator(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags)
+redfishService* createServiceEnumeratorExt(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, const serviceHttpHandler* handler)
 {
-    REDFISH_DEBUG_DEBUG_PRINT("%s: Entered. host = %s, rootUri = %s, auth = %p, flags = %x\n", __func__, host, rootUri, auth, flags);
+    REDFISH_DEBUG_DEBUG_PRINT("%s: Entered. host = %s, rootUri = %s, auth = %p, flags = %x, handler = %p\n", __func__, host, rootUri, auth, flags, handler);
     if(auth == NULL)
     {
-        return createServiceEnumeratorNoAuth(host, rootUri, true, flags);
+        return createServiceEnumeratorNoAuth(host, rootUri, true, flags, handler);
     }
     if(auth->authType == REDFISH_AUTH_BASIC)
     {
-        return createServiceEnumeratorBasicAuth(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags);
+        return createServiceEnumeratorBasicAuth(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags, handler);
     }
     else if(auth->authType == REDFISH_AUTH_BEARER_TOKEN)
     {
-        return createServiceEnumeratorToken(host, rootUri, auth->authCodes.authToken.token, flags);
+        return createServiceEnumeratorToken(host, rootUri, auth->authCodes.authToken.token, flags, handler);
     }
     else if(auth->authType == REDFISH_AUTH_SESSION)
     {
-        return createServiceEnumeratorSessionAuth(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags);
+        return createServiceEnumeratorSessionAuth(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags, handler);
     }
     else if (auth->authType == REDFISH_AUTH_TLS)
     {
-        return createServiceEnumeratorTlsAuth(host, rootUri, auth->authCodes.authTls.verifyPeer, auth->authCodes.authTls.verifyHostname, auth->authCodes.authTls.clientCertFile, auth->authCodes.authTls.clientKeyFile, auth->authCodes.authTls.caCertFile, flags);
+        return createServiceEnumeratorTlsAuth(host, rootUri, auth->authCodes.authTls.verifyPeer, auth->authCodes.authTls.verifyHostname, auth->authCodes.authTls.clientCertFile, auth->authCodes.authTls.clientKeyFile, auth->authCodes.authTls.caCertFile, flags, handler);
     }
     else
     {
@@ -89,6 +90,11 @@ redfishService* createServiceEnumerator(
     }
 }
 
+redfishService* createServiceEnumerator(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags)
+{
+    return createServiceEnumeratorExt(host, rootUri, auth, flags, NULL);
+}
+
 void updateServiceHost(redfishService* service, const char* host) {
   mutex_lock(&service->endpoint_mutex);
   char* old_host = service->host;
@@ -585,24 +591,24 @@ static void setupRequestFromOptions(asyn
     request->timeout = options->timeout;
 }
 
-bool createServiceEnumeratorAsync(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context)
+bool createServiceEnumeratorAsyncExt(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler)
 {
-    REDFISH_DEBUG_DEBUG_PRINT("%s: Entered. host = %s, rootUri = %s, auth = %p, callback = %p, context = %p\n", __func__, host, rootUri, auth, callback, context);
+    REDFISH_DEBUG_DEBUG_PRINT("%s: Entered. host = %s, rootUri = %s, auth = %p, callback = %p, context = %p, handler = %p\n", __func__, host, rootUri, auth, callback, context, handler);
     if(auth == NULL)
     {
-        return createServiceEnumeratorNoAuthAsync(host, rootUri, flags, callback, context);
+        return createServiceEnumeratorNoAuthAsync(host, rootUri, flags, callback, context, handler);
     }
     if(auth->authType == REDFISH_AUTH_BASIC)
     {
-        return createServiceEnumeratorBasicAuthAsync(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags, callback, context);
+        return createServiceEnumeratorBasicAuthAsync(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags, callback, context, handler);
     }
     else if(auth->authType == REDFISH_AUTH_BEARER_TOKEN)
     {
-        return createServiceEnumeratorTokenAsync(host, rootUri, auth->authCodes.authToken.token, flags, callback, context);
+        return createServiceEnumeratorTokenAsync(host, rootUri, auth->authCodes.authToken.token, flags, callback, context, handler);
     }
     else if(auth->authType == REDFISH_AUTH_SESSION)
     {
-        return createServiceEnumeratorSessionAuthAsync(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags, callback, context);
+        return createServiceEnumeratorSessionAuthAsync(host, rootUri, auth->authCodes.userPass.username, auth->authCodes.userPass.password, flags, callback, context, handler);
     }
     else
     {
@@ -610,6 +616,16 @@ bool createServiceEnumeratorAsync(const 
     }
 }
 
+bool createServiceEnumeratorAsync(const char* host, const char* rootUri, enumeratorAuthentication* auth, unsigned int flags, redfishCreateAsyncCallback callback, void* context)
+{
+    return createServiceEnumeratorAsyncExt(host, rootUri, auth, flags, callback, context, NULL);
+}
+
+bool startRawAsyncRequest(redfishService* service, asyncHttpRequest* request, asyncRawCallback callback, void* callback_context)
+{
+  return service->start_request_handler(service, service->request_handler_context, request, callback, callback_context);
+}
+
 bool getUriFromServiceAsync(redfishService* service, const char* uri, redfishAsyncOptions* options, redfishAsyncCallback callback, void* context)
 {
     char* url;
@@ -1272,6 +1288,11 @@ static void freeServicePtr(redfishServic
         free(service->caCertFile);
         service->caCertFile = NULL;
     }
+    if (service->cleanup_request_handler_context != NULL) {
+        // Call this even if request_handler_context is NULL:
+        // The user provided a cleanup, use it.
+        service->cleanup_request_handler_context(service->request_handler_context);
+    }
     if(service->selfTerm == false && service->eventTerm == false)
     {
         free(service);
@@ -1369,15 +1390,19 @@ static void handleHostnameToRedfishServi
 #endif
 }
 
-static redfishService* createServiceEnumeratorNoAuth(const char* host, const char* rootUri, bool enumerate, unsigned int flags)
+static redfishService* createServiceEnumeratorNoAuth(const char* host, const char* rootUri, bool enumerate, unsigned int flags, const serviceHttpHandler* handler)
 {
     redfishService* ret;
 
     ret = (redfishService*)calloc(1, sizeof(redfishService));
 	if(ret == NULL)
 	{
-		REDFISH_DEBUG_CRIT_PRINT("%s: Unable to allocate service!", __func__);
-		return NULL;
+        REDFISH_DEBUG_CRIT_PRINT("%s: Unable to allocate service!", __func__);
+        /* Handler is consumed even on failure. */
+        if (handler != NULL && handler->start_request_handler != NULL && handler->cleanup_request_handler_context != NULL) {
+            handler->cleanup_request_handler_context(handler->request_handler_context);
+        }
+        return NULL;
 	}
     serviceIncRef(ret);
     mutex_init(&ret->endpoint_mutex);
@@ -1386,6 +1411,13 @@ static redfishService* createServiceEnum
     mutex_unlock(&ret->endpoint_mutex);
     ret->flags = flags;
     ret->tcpSocket = -1;
+    if (handler != NULL && handler->start_request_handler != NULL) {
+        ret->start_request_handler = handler->start_request_handler;
+        ret->cleanup_request_handler_context = handler->cleanup_request_handler_context;
+        ret->request_handler_context = handler->request_handler_context;
+    } else {
+        ret->start_request_handler = defaultStartRawAsyncRequest;
+    }
     if(enumerate)
     {
         ret->versions = getVersions(ret, rootUri);
@@ -1394,7 +1426,7 @@ static redfishService* createServiceEnum
     return ret;
 }
 
-static bool createServiceEnumeratorNoAuthAsync(const char* host, const char* rootUri, unsigned int flags, redfishCreateAsyncCallback callback, void* context)
+static bool createServiceEnumeratorNoAuthAsync(const char* host, const char* rootUri, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler)
 {
     redfishService* ret;
     bool rc;
@@ -1402,6 +1434,9 @@ static bool createServiceEnumeratorNoAut
     ret = (redfishService*)calloc(1, sizeof(redfishService));
     if(ret == NULL)
     {
+        if (handler != NULL && handler->start_request_handler != NULL && handler->cleanup_request_handler_context != NULL) {
+            handler->cleanup_request_handler_context(handler->request_handler_context);
+        }
         return false;
     }
     serviceIncRef(ret);
@@ -1411,6 +1446,13 @@ static bool createServiceEnumeratorNoAut
     mutex_unlock(&ret->endpoint_mutex);
     ret->flags = flags;
     ret->tcpSocket = -1;
+    if (handler != NULL && handler->start_request_handler != NULL) {
+        ret->start_request_handler = handler->start_request_handler;
+        ret->cleanup_request_handler_context = handler->cleanup_request_handler_context;
+        ret->request_handler_context = handler->request_handler_context;
+    } else {
+        ret->start_request_handler = defaultStartRawAsyncRequest;
+    }
     rc = getVersionsAsync(ret, rootUri, callback, context);
     if(rc == false)
     {
@@ -1419,7 +1461,7 @@ static bool createServiceEnumeratorNoAut
     return rc;
 }
 
-static redfishService* createServiceEnumeratorBasicAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags)
+static redfishService* createServiceEnumeratorBasicAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, const serviceHttpHandler* handler)
 {
     redfishService* ret;
     char userPass[1024] = {0};
@@ -1436,13 +1478,13 @@ static redfishService* createServiceEnum
     snprintf(userPass, sizeof(userPass), "Basic %s", base64);
     free(base64);
 
-    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags);
+    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags, handler);
     ret->otherAuth = safeStrdup(userPass);
     ret->versions = getVersions(ret, rootUri);
     return ret;
 }
 
-static bool createServiceEnumeratorBasicAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context)
+static bool createServiceEnumeratorBasicAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler)
 {
     redfishService* ret;
     char userPass[1024] = {0};
@@ -1461,7 +1503,7 @@ static bool createServiceEnumeratorBasic
     free(base64);
 
     //This does no network interactions when enumerate is false... use it because it's easier
-    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags);
+    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags, handler);
     if(ret == NULL)
     {
         return false;
@@ -1475,7 +1517,7 @@ static bool createServiceEnumeratorBasic
     return rc;
 }
 
-static redfishService* createServiceEnumeratorSessionAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags)
+static redfishService* createServiceEnumeratorSessionAuth(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, const serviceHttpHandler* handler)
 {
     redfishService* ret;
     redfishPayload* payload;
@@ -1487,7 +1529,7 @@ static redfishService* createServiceEnum
     json_t* post;
     char* content;
 
-    ret = createServiceEnumeratorNoAuth(host, rootUri, true, flags);
+    ret = createServiceEnumeratorNoAuth(host, rootUri, true, flags, handler);
     if(ret == NULL)
     {
         return NULL;
@@ -1547,8 +1589,8 @@ static redfishService* createServiceEnum
 }
 
-static redfishService* createServiceEnumeratorTlsAuth(const char* host, const char* rootUri, bool verifyPeer, bool verifyHostname, const char* clientCertFile, const char* clientKeyFile, const char* caCertFile, unsigned int flags)
+static redfishService* createServiceEnumeratorTlsAuth(const char* host, const char* rootUri, bool verifyPeer, bool verifyHostname, const char* clientCertFile, const char* clientKeyFile, const char* caCertFile, unsigned int flags, const serviceHttpHandler* handler)
 {
-    redfishService* ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags);
+    redfishService* ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags, handler);
     ret->verifyPeer = verifyPeer;
     ret->verifyHostname = verifyHostname;
     ret->clientCertFile = safeStrdup(clientCertFile);
@@ -1743,7 +1785,7 @@ static void finishedRedfishCreate(redfis
     }
 }
 
-static bool createServiceEnumeratorSessionAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context)
+static bool createServiceEnumeratorSessionAuthAsync(const char* host, const char* rootUri, const char* username, const char* password, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler)
 {
     bool rc;
     createServiceSessionAuthAsyncContext* myContext;
@@ -1760,7 +1802,7 @@ static bool createServiceEnumeratorSessi
     myContext->originalContext = context;
     myContext->service = NULL;
 
-    rc = createServiceEnumeratorNoAuthAsync(host, rootUri, flags, finishedRedfishCreate, myContext);
+    rc = createServiceEnumeratorNoAuthAsync(host, rootUri, flags, finishedRedfishCreate, myContext, handler);
     if(rc == false)
     {
         free(myContext->username);
@@ -1770,11 +1812,11 @@ static bool createServiceEnumeratorSessi
     return rc;
 }
 
-static redfishService* createServiceEnumeratorToken(const char* host, const char* rootUri, const char* token, unsigned int flags)
+static redfishService* createServiceEnumeratorToken(const char* host, const char* rootUri, const char* token, unsigned int flags, const serviceHttpHandler* handler)
 {
     redfishService* ret;
 
-    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags);
+    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags, handler);
     if(ret == NULL)
     {
         return ret;
@@ -1784,13 +1826,13 @@ static redfishService* createServiceEnum
     return ret;
 }
 
-static bool createServiceEnumeratorTokenAsync(const char* host, const char* rootUri, const char* token, unsigned int flags, redfishCreateAsyncCallback callback, void* context)
+static bool createServiceEnumeratorTokenAsync(const char* host, const char* rootUri, const char* token, unsigned int flags, redfishCreateAsyncCallback callback, void* context, const serviceHttpHandler* handler)
 {
     redfishService* ret;
     bool rc;
 
     //This does no network interactions when enumerate is false... use it because it's easier
-    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags);
+    ret = createServiceEnumeratorNoAuth(host, rootUri, false, flags, handler);
     if(ret == NULL)
     {
         return false;
