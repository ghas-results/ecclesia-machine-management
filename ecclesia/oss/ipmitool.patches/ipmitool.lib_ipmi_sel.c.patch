--- lib/ipmi_sel.c	2021-08-12 16:55:48.000000000 -0700
+++ lib/ipmi_sel.c	2020-10-30 12:27:45.000000000 -0700
@@ -813,7 +813,7 @@
 											{
 						                        str = desc+strlen(desc);
 												*str++ = ',';
-												str = '\0';
+												str = NULL;
 						              					count = 0;
 											}
 											switch(i) /* Which type of memory config is present.. */
@@ -1504,123 +1504,167 @@
 	return type;
 }
 
-static int
-ipmi_sel_get_info(struct ipmi_intf * intf)
+static int ipmi_sel_print_info(struct ipmi_intf *intf)
 {
-	struct ipmi_rs * rsp;
-	struct ipmi_rq req;
-	uint16_t e, version;
-	uint32_t f;
-	int pctfull = 0;
-	uint32_t fs    = 0xffffffff;
-	uint32_t zeros = 0;
-
-
-	memset(&req, 0, sizeof(req));
-	req.msg.netfn = IPMI_NETFN_STORAGE;
-	req.msg.cmd = IPMI_CMD_GET_SEL_INFO;
-
-	rsp = intf->sendrecv(intf, &req);
-	if (!rsp) {
-		lprintf(LOG_ERR, "Get SEL Info command failed");
-		return -1;
-	} else if (rsp->ccode) {
-		lprintf(LOG_ERR, "Get SEL Info command failed: %s",
-		       val2str(rsp->ccode, completion_code_vals));
-		return -1;
-	} else if (rsp->data_len != 14) {
-		lprintf(LOG_ERR, "Get SEL Info command failed: "
-			"Invalid data length %d", rsp->data_len);
-		return (-1);
-	}
-	if (verbose > 2)
-		printbuf(rsp->data, rsp->data_len, "sel_info");
-
-	printf("SEL Information\n");
-        version = rsp->data[0];
-	printf("Version          : %d.%d (%s)\n",
-	       version & 0xf, (version>>4) & 0xf,
-	       (version == 0x51 || version == 0x02) ? "v1.5, v2 compliant" : "Unknown");
-
-	/* save the entry count and free space to determine percent full */
-	e = buf2short(rsp->data + 1);
-	f = buf2short(rsp->data + 3);
-	printf("Entries          : %d\n", e);
-	printf("Free Space       : %d bytes %s\n", f ,(f==65535 ? "or more" : "" ));
-
-	if (e) {
-		e *= 16; /* each entry takes 16 bytes */
-		f += e;	/* this is supposed to give the total size ... */
-		pctfull = (int)(100 * ( (double)e / (double)f ));
-	}
-
-	if( f >= 65535 ) {
-		printf("Percent Used     : %s\n", "unknown" );
-	}
-	else {
-		printf("Percent Used     : %d%%\n", pctfull);
-	}
-
-
-	if ((!memcmp(rsp->data + 5, &fs,    4)) ||
-		(!memcmp(rsp->data + 5, &zeros, 4)))
-		printf("Last Add Time    : Not Available\n");
-	else
-		printf("Last Add Time    : %s\n",
-			   ipmi_timestamp_numeric(buf2long(rsp->data + 5)));
-
-	if ((!memcmp(rsp->data + 9, &fs,    4)) ||
-		(!memcmp(rsp->data + 9, &zeros, 4)))
-		printf("Last Del Time    : Not Available\n");
-	else
-		printf("Last Del Time    : %s\n",
-			   ipmi_timestamp_numeric(buf2long(rsp->data + 9)));
-
-
-	printf("Overflow         : %s\n",
-	       rsp->data[13] & 0x80 ? "true" : "false");
-	printf("Supported Cmds   : ");
-        if (rsp->data[13] & 0x0f)
-        {
-	        if (rsp->data[13] & 0x08)
-                        printf("'Delete' ");
-	        if (rsp->data[13] & 0x04)
-                        printf("'Partial Add' ");
-	        if (rsp->data[13] & 0x02)
-                        printf("'Reserve' ");
-	        if (rsp->data[13] & 0x01)
-                        printf("'Get Alloc Info' ");
-        }
-        else
-                printf("None");
-        printf("\n");
-
-	/* get sel allocation info if supported */
-	if (rsp->data[13] & 1) {
-		memset(&req, 0, sizeof(req));
-		req.msg.netfn = IPMI_NETFN_STORAGE;
-		req.msg.cmd = IPMI_CMD_GET_SEL_ALLOC_INFO;
+  struct sel_info sel_info;
+  struct alloc_info alloc_info;
+  int rc;
+  uint16_t e, version;
+  uint32_t f;
+  int pctfull = 0;
+  uint32_t fs = 0xffffffff;
+  uint32_t zeros = 0;
+
+  memset(&sel_info, 0, sizeof(sel_info));
+  rc = ipmi_sel_get_info(intf, &sel_info);
+  if (rc != 0) {
+      return rc;
+  }
+
+  printf("SEL Information\n");
+  printf(
+      "Version          : %d.%d (%s)\n",
+      sel_info.version & 0xf, (sel_info.version >> 4) & 0xf,
+      (sel_info.version == 0x51 || sel_info.version == 0x02) ?
+          "v1.5, v2 compliant" : "Unknown");
+
+  /* save the entry count and free space to determine percent full */
+  printf("Entries          : %d\n", sel_info.num_entries);
+  printf("Free Space       : %d bytes %s\n", sel_info.free_space,
+         (sel_info.free_space == 65535 ? "or more" : ""));
+
+  f = sel_info.free_space;
+  if (sel_info.num_entries) {
+    e = sel_info.num_entries * 16; /* each entry takes 16 bytes */
+    f = sel_info.free_space + e;  /* this is supposed to give the total size ... */
+    pctfull = (int)(100 * ((double)e / (double)f));
+  }
+
+  if (f >= 65535) {
+    printf("Percent Used     : %s\n", "unknown");
+  } else {
+    printf("Percent Used     : %d%%\n", pctfull);
+  }
+
+  if ((!memcmp(&sel_info.last_add_timestamp, &fs, 4)) ||
+      (!memcmp(&sel_info.last_add_timestamp, &zeros, 4)))
+    printf("Last Add Time    : Not Available\n");
+  else
+    printf("Last Add Time    : %s\n",
+           ipmi_timestamp_numeric(sel_info.last_add_timestamp));
+
+  if ((!memcmp(&sel_info.last_del_timestamp, &fs, 4)) ||
+      (!memcmp(&sel_info.last_del_timestamp, &zeros, 4)))
+    printf("Last Del Time    : Not Available\n");
+  else
+    printf("Last Del Time    : %s\n",
+           ipmi_timestamp_numeric(sel_info.last_del_timestamp));
+
+  printf("Overflow         : %s\n", sel_info.overflow ? "true" : "false");
+  printf("Supported Cmds   : ");
+  if (sel_info.cmd_supported_delete || sel_info.cmd_supported_partial_add ||
+      sel_info.cmd_supported_reserve || sel_info.cmd_supported_get_alloc_info) {
+    if (sel_info.cmd_supported_delete) printf("'Delete' ");
+    if (sel_info.cmd_supported_partial_add) printf("'Partial Add' ");
+    if (sel_info.cmd_supported_reserve) printf("'Reserve' ");
+    if (sel_info.cmd_supported_get_alloc_info) printf("'Get Alloc Info' ");
+  } else
+    printf("None");
+  printf("\n");
+
+  /* get sel allocation info if supported */
+  if (sel_info.cmd_supported_get_alloc_info) {
+    rc = ipmi_sel_get_alloc_info(intf, &alloc_info);
+    if (rc != 0) {
+        return rc;
+    }
+
+    printf("# of Alloc Units : %d\n", alloc_info.num_alloc_units);
+    printf("Alloc Unit Size  : %d\n", alloc_info.size_alloc_units);
+    printf("# Free Units     : %d\n", alloc_info.num_free_units);
+    printf("Largest Free Blk : %d\n", alloc_info.largest_free_blk);
+    printf("Max Record Size  : %d\n", alloc_info.max_record_size);
+  }
+  return 0;
+}
+
+int
+ipmi_sel_get_info(struct ipmi_intf *intf, struct sel_info *info)
+{
+  struct ipmi_rs *rsp;
+  struct ipmi_rq req;
+
+  memset(&req, 0, sizeof(req));
+  req.msg.netfn = IPMI_NETFN_STORAGE;
+  req.msg.cmd = IPMI_CMD_GET_SEL_INFO;
+
+  rsp = intf->sendrecv(intf, &req);
+  if (rsp == NULL) {
+    lprintf(LOG_ERR, "Get SEL Info command failed");
+    return -1;
+  } else if (rsp->ccode > 0) {
+    lprintf(LOG_ERR, "Get SEL Info command failed: %s",
+            val2str(rsp->ccode, completion_code_vals));
+    return -1;
+  } else if (rsp->data_len != 14) {
+    lprintf(LOG_ERR,
+            "Get SEL Info command failed: "
+            "Invalid data length %d",
+            rsp->data_len);
+    return (-1);
+  }
+  if (verbose > 2) printbuf(rsp->data, rsp->data_len, "sel_info");
+
+  info->version = rsp->data[0];
+  info->num_entries = buf2short(rsp->data + 1);
+  info->free_space = buf2short(rsp->data + 3);
+  info->last_add_timestamp = buf2long(rsp->data + 5);
+  info->last_del_timestamp = buf2long(rsp->data + 9);
+  info->overflow = rsp->data[13] & 0x80 ? 1 : 0;
+  info->cmd_supported_delete = rsp->data[13] & 0x08 ? 1 : 0;
+  info->cmd_supported_partial_add = rsp->data[13] & 0x04 ? 1 : 0;
+  info->cmd_supported_reserve = rsp->data[13] & 0x02 ? 1 : 0;
+  info->cmd_supported_get_alloc_info = rsp->data[13] & 0x01 ? 1 : 0;
+  return 0;
+}
+
+int ipmi_sel_get_alloc_info(struct ipmi_intf *intf, struct alloc_info *info) {
+  struct ipmi_rs *rsp;
+  struct ipmi_rq req;
+
+  memset(&req, 0, sizeof(req));
+  req.msg.netfn = IPMI_NETFN_STORAGE;
+  req.msg.cmd = IPMI_CMD_GET_SEL_ALLOC_INFO;
+
+  rsp = intf->sendrecv(intf, &req);
+  if (rsp == NULL) {
+    lprintf(LOG_ERR, "Get SEL Allocation Info command failed");
+    return -1;
+  }
+  if (rsp->ccode > 0) {
+    lprintf(LOG_ERR, "Get SEL Allocation Info command failed: %s",
+            val2str(rsp->ccode, completion_code_vals));
+    return -1;
+  }
+
+  info->num_alloc_units = buf2short(rsp->data);
+  info->size_alloc_units =  buf2short(rsp->data + 2);
+  info->num_free_units = buf2short(rsp->data + 4);
+  info->largest_free_blk = buf2short(rsp->data + 6);
+  info->max_record_size = rsp->data[8];
+  return 0;
+}
+
+uint8_t ipmi_sel_record_is_standard_type(uint8_t record_type) {
+  return record_type < 0xc0;
+}
 
-		rsp = intf->sendrecv(intf, &req);
-		if (!rsp) {
-			lprintf(LOG_ERR,
-				"Get SEL Allocation Info command failed");
-			return -1;
-		}
-		if (rsp->ccode) {
-			lprintf(LOG_ERR,
-				"Get SEL Allocation Info command failed: %s",
-				val2str(rsp->ccode, completion_code_vals));
-			return -1;
-		}
+uint8_t ipmi_sel_record_is_oem_ts_type(uint8_t record_type) {
+  return record_type >= 0xc0 && record_type < 0xe0;
+}
 
-		printf("# of Alloc Units : %d\n", buf2short(rsp->data));
-		printf("Alloc Unit Size  : %d\n", buf2short(rsp->data + 2));
-		printf("# Free Units     : %d\n", buf2short(rsp->data + 4));
-		printf("Largest Free Blk : %d\n", buf2short(rsp->data + 6));
-		printf("Max Record Size  : %d\n", rsp->data[8]);
-	}
-	return 0;
+uint8_t ipmi_sel_record_is_oem_nots_type(uint8_t record_type) {
+  return record_type >= 0xe0;
 }
 
 uint16_t
@@ -2807,7 +2851,7 @@
 	return 0;
 }
 
-static int
+int
 ipmi_sel_clear(struct ipmi_intf * intf)
 {
 	struct ipmi_rs * rsp;
@@ -3006,7 +3050,7 @@
 	int rc = 0;
 
 	if (argc == 0)
-		rc = ipmi_sel_get_info(intf);
+		rc = ipmi_sel_print_info(intf);
 	else if (strncmp(argv[0], "help", 4) == 0)
 		lprintf(LOG_ERR, "SEL Commands:  "
 				"info clear delete list elist get add time save readraw writeraw interpret");
@@ -3024,7 +3068,7 @@
 		rc = ipmi_sel_interpret(intf, iana, argv[2], argv[3]);
 	}
 	else if (strncmp(argv[0], "info", 4) == 0)
-		rc = ipmi_sel_get_info(intf);
+		rc = ipmi_sel_print_info(intf);
 	else if (strncmp(argv[0], "save", 4) == 0) {
 		if (argc < 2) {
 			lprintf(LOG_NOTICE, "usage: sel save <filename>");
