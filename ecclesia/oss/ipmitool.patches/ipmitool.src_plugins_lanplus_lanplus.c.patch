--- src/plugins/lanplus/lanplus.c	2021-08-12 17:05:55.000000000 -0700
+++ src/plugins/lanplus/lanplus.c	2021-07-28 10:05:41.000000000 -0700
@@ -48,26 +48,26 @@
 #include <assert.h>
 
 #ifdef HAVE_CONFIG_H
-# include <config.h>
+# include "config.h"
 #endif
-#include <ipmitool/helper.h>
-#include <ipmitool/log.h>
-#include <ipmitool/ipmi.h>
-#include <ipmitool/ipmi_lanp.h>
-#include <ipmitool/ipmi_channel.h>
-#include <ipmitool/ipmi_intf.h>
-#include <ipmitool/ipmi_sel.h>
-#include <ipmitool/ipmi_strings.h>
-#include <ipmitool/hpm2.h>
-#include <ipmitool/bswap.h>
+#include "include/ipmitool/helper.h"
+#include "include/ipmitool/log.h"
+#include "include/ipmitool/ipmi.h"
+#include "include/ipmitool/ipmi_lanp.h"
+#include "include/ipmitool/ipmi_channel.h"
+#include "include/ipmitool/ipmi_intf.h"
+#include "include/ipmitool/ipmi_sel.h"
+#include "include/ipmitool/ipmi_strings.h"
+#include "include/ipmitool/hpm2.h"
+#include "include/ipmitool/bswap.h"
 #include <openssl/rand.h>
 
-#include "lanplus.h"
-#include "lanplus_crypt.h"
-#include "lanplus_crypt_impl.h"
-#include "lanplus_dump.h"
-#include "rmcp.h"
-#include "asf.h"
+#include "src/plugins/lanplus/asf.h"
+#include "src/plugins/lanplus/lanplus.h"
+#include "src/plugins/lanplus/lanplus_crypt.h"
+#include "src/plugins/lanplus/lanplus_crypt_impl.h"
+#include "src/plugins/lanplus/lanplus_dump.h"
+#include "src/plugins/lanplus/rmcp.h"
 
 /*
  * LAN interface is required to support 45 byte request transactions and
@@ -82,9 +82,17 @@
 extern const struct valstr ipmi_integrity_algorithms[];
 extern const struct valstr ipmi_encryption_algorithms[];
 
-static struct ipmi_rq_entry * ipmi_req_entries;
-static struct ipmi_rq_entry * ipmi_req_entries_tail;
-
+// Contains per-lanplus state, stored in the `ipmi_intf` for a given lanplus
+// interface within the context pointer.
+struct lanplus_context {
+  uint8_t last_received_sequence_number;
+  uint8_t last_received_byte_count;
+  struct ipmi_rs rsp;
+  struct ipmi_rq_entry *ipmi_req_entries;
+  struct ipmi_rq_entry *ipmi_req_entries_tail;
+  uint8_t bridgePossible;
+  uint8_t curr_seq;
+};
 
 static int ipmi_lanplus_setup(struct ipmi_intf * intf);
 static int ipmi_lanplus_keepalive(struct ipmi_intf * intf);
@@ -94,13 +102,10 @@
 static struct ipmi_rs * ipmi_lanplus_send_ipmi_cmd(struct ipmi_intf * intf, struct ipmi_rq * req);
 static struct ipmi_rs * ipmi_lanplus_send_payload(struct ipmi_intf * intf,
 												  struct ipmi_v2_payload * payload);
-static void getIpmiPayloadWireRep(
-								  struct ipmi_intf       * intf,
-								  struct ipmi_v2_payload * payload,  /* in  */
-								  uint8_t  * out,
-								  struct ipmi_rq * req,
-								  uint8_t    rq_seq,
-								  uint8_t curr_seq);
+static void getIpmiPayloadWireRep(struct ipmi_intf *intf,
+                                  struct ipmi_v2_payload *payload, /* in  */
+                                  uint8_t *msg, struct ipmi_rq *req,
+                                  uint8_t rq_seq, uint8_t curr_seq);
 static void getSolPayloadWireRep(
 								 uint8_t          * msg,
 								 struct ipmi_v2_payload * payload);
@@ -116,16 +121,14 @@
 static struct ipmi_rs * ipmi_lanplus_send_sol(
 											  struct ipmi_intf * intf,
 											  struct ipmi_v2_payload * payload);
-static int check_sol_packet_for_new_data(
-									 struct ipmi_rs *rsp);
+static int check_sol_packet_for_new_data(struct ipmi_intf *intf,
+                                         struct ipmi_rs *rsp);
 static void ack_sol_packet(
 							struct ipmi_intf * intf,
 							struct ipmi_rs * rsp);
 static void ipmi_lanp_set_max_rq_data_size(struct ipmi_intf * intf, uint16_t size);
 static void ipmi_lanp_set_max_rp_data_size(struct ipmi_intf * intf, uint16_t size);
 
-static uint8_t bridgePossible = 0;
-
 struct ipmi_intf ipmi_lanplus_intf = {
 	.name = "lanplus",
 	.desc = "IPMI v2.0 RMCP+ LAN Interface",
@@ -141,11 +144,8 @@
 	.target_addr = IPMI_BMC_SLAVE_ADDR,
 };
 
-
 extern int verbose;
 
-
-
 /*
  * lanplus_get_requested_ciphers
  *
@@ -165,8 +165,7 @@
 lanplus_get_requested_ciphers(enum cipher_suite_ids cipher_suite_id,
                               uint8_t *auth_alg,
                               uint8_t *integrity_alg,
-                              uint8_t *crypt_alg)
-{
+                              uint8_t *crypt_alg) {
 		/* See table 22-19 for the source of the statement */
 	switch (cipher_suite_id)
 	{
@@ -284,17 +283,17 @@
 	{ 0x00, NULL },
 };
 
-
 static struct ipmi_rq_entry *
-ipmi_req_add_entry(struct ipmi_intf * intf, struct ipmi_rq * req, uint8_t req_seq)
-{
+ipmi_req_add_entry(struct ipmi_intf * intf, struct ipmi_rq * req,
+    uint8_t req_seq) {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	struct ipmi_rq_entry * e;
 
 	e = malloc(sizeof(struct ipmi_rq_entry));
-	if (!e) {
-		lprintf(LOG_ERR, "ipmitool: malloc failure");
-		return NULL;
-	}
+  if (e == NULL) {
+    lprintf(LOG_ERR, "ipmitool: malloc failure");
+    return NULL;
+  }
 
 	memset(e, 0, sizeof(struct ipmi_rq_entry));
 	memcpy(&e->req, req, sizeof(struct ipmi_rq));
@@ -302,22 +301,21 @@
 	e->intf = intf;
 	e->rq_seq = req_seq;
 
-	if (!ipmi_req_entries)
-		ipmi_req_entries = e;
-	else
-		ipmi_req_entries_tail->next = e;
+  if (context->ipmi_req_entries == NULL)
+    context->ipmi_req_entries = e;
+  else
+    context->ipmi_req_entries_tail->next = e;
 
-	ipmi_req_entries_tail = e;
+	context->ipmi_req_entries_tail = e;
 	lprintf(LOG_DEBUG+3, "added list entry seq=0x%02x cmd=0x%02x",
-		e->rq_seq, e->req.msg.cmd);     
+		e->rq_seq, e->req.msg.cmd);
 	return e;
 }
 
-
 static struct ipmi_rq_entry *
-ipmi_req_lookup_entry(uint8_t seq, uint8_t cmd)
-{
-	struct ipmi_rq_entry * e = ipmi_req_entries;
+ipmi_req_lookup_entry(const struct ipmi_intf *intf, uint8_t seq, uint8_t cmd) {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
+  struct ipmi_rq_entry *e = context->ipmi_req_entries;
 
 	while (e && (e->rq_seq != seq || e->req.msg.cmd != cmd)) {
 		if (e == e->next)
@@ -328,11 +326,11 @@
 }
 
 static void
-ipmi_req_remove_entry(uint8_t seq, uint8_t cmd)
-{
-	struct ipmi_rq_entry * p, * e, * saved_next_entry;
+ipmi_req_remove_entry(struct ipmi_intf *intf, uint8_t seq, uint8_t cmd) {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
+  struct ipmi_rq_entry *p, *e, *saved_next_entry;
 
-	e = p = ipmi_req_entries;
+  e = p = context->ipmi_req_entries;
 
 	while (e && (e->rq_seq != seq || e->req.msg.cmd != cmd)) {
 		p = e;
@@ -344,19 +342,19 @@
 		saved_next_entry = e->next;
 		p->next = (p->next == e->next) ? NULL : e->next;
 		/* If entry being removed is first in list, fix up list head */
-		if (ipmi_req_entries == e) {
-			if (ipmi_req_entries != p)
-				ipmi_req_entries = p;
-			else
-				ipmi_req_entries = saved_next_entry;
-		}
-		/* If entry being removed is last in list, fix up list tail */
-		if (ipmi_req_entries_tail == e) {
-			if (ipmi_req_entries_tail != p)
-				ipmi_req_entries_tail = p;
-			else
-				ipmi_req_entries_tail = NULL;
-		}
+    if (context->ipmi_req_entries == e) {
+      if (context->ipmi_req_entries != p)
+        context->ipmi_req_entries = p;
+      else
+        context->ipmi_req_entries = saved_next_entry;
+    }
+    /* If entry being removed is last in list, fix up list tail */
+    if (context->ipmi_req_entries_tail == e) {
+      if (context->ipmi_req_entries_tail != p)
+        context->ipmi_req_entries_tail = p;
+      else
+        context->ipmi_req_entries_tail = NULL;
+    }
 
 		if (e->msg_data) {
 			free(e->msg_data);
@@ -368,42 +366,36 @@
 }
 
 static void
-ipmi_req_clear_entries(void)
-{
-	struct ipmi_rq_entry * p, * e;
-
-	e = ipmi_req_entries;
-	while (e) {
-		lprintf(LOG_DEBUG+3, "cleared list entry seq=0x%02x cmd=0x%02x",
-			e->rq_seq, e->req.msg.cmd);
-		p = e->next;
-		free(e);
-		e = p;
-	}
+ipmi_req_clear_entries(struct ipmi_intf *intf) {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
+  struct ipmi_rq_entry *p, *e;
+
+  e = context->ipmi_req_entries;
+  while (e) {
+    lprintf(LOG_DEBUG + 3, "cleared list entry seq=0x%02x cmd=0x%02x",
+            e->rq_seq, e->req.msg.cmd);
+    p = e->next;
+    free(e);
+    e = p;
+  }
 
-	ipmi_req_entries = NULL;
-	ipmi_req_entries_tail = NULL;
+  context->ipmi_req_entries = NULL;
+  context->ipmi_req_entries_tail = NULL;
 }
 
-
 int
-ipmi_lan_send_packet(
-					 struct ipmi_intf * intf,
-					 uint8_t * data, int
-					 data_len)
-{
+ipmi_lan_send_packet(struct ipmi_intf * intf, uint8_t * data, int data_len) {
 	if (verbose >= 5)
 		printbuf(data, data_len, ">> sending packet");
 
 	return send(intf->fd, data, data_len, 0);
 }
 
-
-
 struct ipmi_rs *
-ipmi_lan_recv_packet(struct ipmi_intf * intf)
-{
-	static struct ipmi_rs rsp;
+ipmi_lan_recv_packet(struct ipmi_intf *intf) {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
+  struct ipmi_rs *rsp_ptr = &context->rsp;
+
 	fd_set read_set, err_set;
 	struct timeval tmout;
 	int ret;
@@ -431,7 +423,7 @@
 	 * regardless of the order they were sent out.  (unless the
 	 * response is read before the connection refused is returned)
 	 */
-	ret = recv(intf->fd, &rsp.data, IPMI_BUF_SIZE, 0);
+	ret = recv(intf->fd, &rsp_ptr->data, IPMI_BUF_SIZE, 0);
 
 	if (ret < 0) {
 		FD_ZERO(&read_set);
@@ -447,7 +439,7 @@
 		if (ret < 0 || FD_ISSET(intf->fd, &err_set) || !FD_ISSET(intf->fd, &read_set))
 			return NULL;
 
-		ret = recv(intf->fd, &rsp.data, IPMI_BUF_SIZE, 0);
+		ret = recv(intf->fd, &rsp_ptr->data, IPMI_BUF_SIZE, 0);
 		if (ret < 0)
 			return NULL;
 	}
@@ -455,17 +447,15 @@
 	if (ret == 0)
 		return NULL;
 
-	rsp.data[ret] = '\0';
-	rsp.data_len = ret;
+	rsp_ptr->data[ret] = '\0';
+	rsp_ptr->data_len = ret;
 
 	if (verbose >= 5)
-		printbuf(rsp.data, rsp.data_len, "<< received packet");
+		printbuf(rsp_ptr->data, rsp_ptr->data_len, "<< received packet");
 
-	return &rsp;
+	return rsp_ptr;
 }
 
-
-
 /*
  * parse response RMCP "pong" packet
  *
@@ -494,8 +484,7 @@
  * asf.data[f:a]= 0x000000000000
  */
 static int
-ipmi_handle_pong(struct ipmi_rs *rsp)
-{
+ipmi_handle_pong(struct ipmi_rs *rsp) {
 	struct rmcp_pong {
 		struct rmcp_hdr rmcp;
 		struct asf_hdr asf;
@@ -550,8 +539,7 @@
  *
  */
 int
-ipmiv2_lan_ping(struct ipmi_intf * intf)
-{
+ipmiv2_lan_ping(struct ipmi_intf * intf) {
 	struct asf_hdr asf_ping = {
 		.iana	= htonl(ASF_RMCP_IANA),
 		.type	= ASF_TYPE_PING,
@@ -603,8 +591,8 @@
  * Returns: the ipmi_rs packet describing the/a response we expect.
  */
 static struct ipmi_rs *
-ipmi_lan_poll_single(struct ipmi_intf * intf)
-{
+ipmi_lan_poll_single(struct ipmi_intf * intf) {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	struct rmcp_hdr * rmcp_rsp;
 	struct ipmi_rs * rsp;
 	struct ipmi_session * session = intf->session;
@@ -732,8 +720,8 @@
 				rsp->ccode);
 
 			/* Are we expecting this packet? */
-			entry = ipmi_req_lookup_entry(rsp->payload.ipmi_response.rq_seq,
-								rsp->payload.ipmi_response.cmd);
+      entry = ipmi_req_lookup_entry(intf, rsp->payload.ipmi_response.rq_seq,
+                                    rsp->payload.ipmi_response.cmd);
 
 			if (!entry) {
 				lprintf(LOG_INFO, "IPMI Request Match NOT FOUND");
@@ -775,8 +763,8 @@
 			}
 
 			/* Remove request entry */
-			ipmi_req_remove_entry(rsp->payload.ipmi_response.rq_seq,
-					rsp->payload.ipmi_response.cmd);
+      ipmi_req_remove_entry(intf, rsp->payload.ipmi_response.rq_seq,
+                            rsp->payload.ipmi_response.cmd);
 
 			/*
 			 * Good packet.  Shift response data to start of array.
@@ -860,8 +848,6 @@
 	return rsp;
 }
 
-
-
 /**
  *
  * ipmi_lan_poll_recv
@@ -872,8 +858,7 @@
  * Returns: the ipmi_rs packet describing the/a response we expect.
  */
 static struct ipmi_rs *
-ipmi_lan_poll_recv(struct ipmi_intf * intf)
-{
+ipmi_lan_poll_recv(struct ipmi_intf * intf) {
 	struct ipmi_rs * rsp;
 
 	do {
@@ -884,8 +869,6 @@
 	return rsp;
 }
 
-
-
 /*
  * read_open_session_response
  *
@@ -901,8 +884,7 @@
  * returns 0 on success, 1 on error
  */
 void
-read_open_session_response(struct ipmi_rs * rsp, int offset)
-{
+read_open_session_response(struct ipmi_rs * rsp, int offset) {
 	memset(&rsp->payload.open_session_response, 0,
 			 sizeof(rsp->payload.open_session_response));
 
@@ -946,8 +928,6 @@
 	 rsp->payload.open_session_response.crypt_alg     = rsp->data[offset + 32];
 }
 
-
-
 /*
  * read_rakp2_message
  *
@@ -966,11 +946,7 @@
  * returns 0 on success, 1 on error
  */
 void
-read_rakp2_message(
-					struct ipmi_rs * rsp,
-					int offset,
-					uint8_t auth_alg)
-{
+read_rakp2_message(struct ipmi_rs * rsp, int offset, uint8_t auth_alg) {
 	 int i;
 
 	 /*  Message tag */
@@ -1033,8 +1009,6 @@
 	 }
 }
 
-
-
 /*
  * read_rakp4_message
  *
@@ -1054,11 +1028,7 @@
  * returns 0 on success, 1 on error
  */
 void
-read_rakp4_message(
-					struct ipmi_rs * rsp,
-					int offset,
-					uint8_t auth_alg)
-{
+read_rakp4_message(struct ipmi_rs * rsp, int offset, uint8_t auth_alg) {
 	 int i;
 
 	 /*  Message tag */
@@ -1107,13 +1077,10 @@
 		 lprintf(LOG_ERR, "read_rakp4_message: no support "
 			 "for authentication algorithm 0x%x", auth_alg);
 		 assert(0);
-		 break;	 
+		 break;
 	 }
 }
 
-
-
-
 /*
  * read_session_data
  *
@@ -1129,10 +1096,7 @@
  *               point to the end of the session when this function exits.
  */
 void
-read_session_data(
-				  struct ipmi_rs * rsp,
-				  int * offset)
-{
+read_session_data(struct ipmi_rs * rsp, int * offset) {
 	/* We expect to read different stuff depending on the authtype */
 	rsp->session.authtype = rsp->data[*offset];
 
@@ -1142,8 +1106,6 @@
 		read_session_data_v15(rsp, offset);
 }
 
-
-
 /*
  * read_session_data_v2x
  *
@@ -1163,16 +1125,12 @@
  *  param s      holds our session state
  */
 void
-read_session_data_v2x(
-					  struct ipmi_rs      * rsp,
-					  int                 * offset)
-{
+read_session_data_v2x(struct ipmi_rs * rsp, int * offset) {
 	rsp->session.authtype = rsp->data[(*offset)++];
 
 	rsp->session.bEncrypted     = (rsp->data[*offset] & 0x80 ? 1 : 0);
 	rsp->session.bAuthenticated = (rsp->data[*offset] & 0x40 ? 1 : 0);
 
-
 	/* Payload type */
 	rsp->session.payloadtype = rsp->data[(*offset)++] & 0x3F;
 
@@ -1188,8 +1146,6 @@
 	*offset += 2;
 }
 
-
-
 /*
  * read_session_data_v15
  *
@@ -1206,10 +1162,7 @@
  *              end of the session when this function exits.
  * param s      holds our session state
  */
-void read_session_data_v15(
-							struct ipmi_rs * rsp,
-							int * offset)
-{
+void read_session_data_v15(struct ipmi_rs * rsp, int * offset) {
 	/* All v15 messages are IPMI messages */
 	rsp->session.payloadtype = IPMI_PAYLOAD_TYPE_IPMI;
 
@@ -1226,23 +1179,20 @@
 	rsp->session.msglen = rsp->data[(*offset)++];
 }
 
-
-
 /*
  * read_ipmi_response
  *
  * Initialize the ipmi_rs from with the IPMI response specific data
  *
  * The offset should point the first byte of the the IPMI payload when this
- * function is called. 
+ * function is called.
  *
  * param rsp    [in/out] we read from the data buffer and populate the IPMI
  *              specific fields.
  * param offset [in/out] should point to the beginning of the IPMI payload when
  *              this function is called.
  */
-void read_ipmi_response(struct ipmi_rs * rsp, int * offset)
-{
+void read_ipmi_response(struct ipmi_rs * rsp, int * offset) {
 	/*
 	 * The data here should be decrypted by now.
 	 */
@@ -1253,29 +1203,24 @@
 	rsp->payload.ipmi_response.rs_addr = rsp->data[(*offset)++];
 	rsp->payload.ipmi_response.rq_seq  = rsp->data[*offset] >> 2;
 	rsp->payload.ipmi_response.rs_lun  = rsp->data[(*offset)++] & 0x3;
-	rsp->payload.ipmi_response.cmd     = rsp->data[(*offset)++]; 
+	rsp->payload.ipmi_response.cmd     = rsp->data[(*offset)++];
 	rsp->ccode                         = rsp->data[(*offset)++];
-
 }
 
-
-
 /*
  * read_sol_packet
  *
  * Initialize the ipmi_rs with the SOL response data
  *
  * The offset should point the first byte of the the SOL payload when this
- * function is called. 
+ * function is called.
  *
  * param rsp    [in/out] we read from the data buffer and populate the
  *              SOL specific fields.
  * param offset [in/out] should point to the beginning of the SOL payload
  *              when this function is called.
  */
-void read_sol_packet(struct ipmi_rs * rsp, int * offset)
-{
-
+void read_sol_packet(struct ipmi_rs * rsp, int * offset) {
 	/*
 	 * The data here should be decrypted by now.
 	 */
@@ -1322,12 +1267,11 @@
 		rsp->payload.sol_packet.break_detected? "true" : "false");
 	lprintf(LOG_DEBUG, "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
 
-	if (verbose >= 5)
-		printbuf(rsp->data + *offset - 4, 4, "SOL MSG FROM BMC");
+	if (verbose >= 5) {
+    printbuf(rsp->data + *offset - 4, 4, "SOL MSG FROM BMC");
+  }
 }
 
-
-
 /*
  * getIpmiPayloadWireRep
  *
@@ -1344,27 +1288,29 @@
 							uint8_t    rq_seq,
 							uint8_t curr_seq)
 {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	int cs, tmp, len;
 	int cs2 = 0;
 	int cs3 = 0;
 	uint8_t ourAddress = intf->my_addr;
 	uint8_t bridgedRequest = 0;
 
-	if (ourAddress == 0)
-		ourAddress = IPMI_BMC_SLAVE_ADDR;
+	if (ourAddress == 0) {
+    ourAddress = IPMI_BMC_SLAVE_ADDR;
+  }
 
 	len = 0;
 
 	/* IPMI Message Header -- Figure 13-4 of the IPMI v2.0 spec */
-	if ((intf->target_addr == ourAddress) || (!bridgePossible)) {
+	if ((intf->target_addr == ourAddress) || (!context->bridgePossible)) {
 		cs = len;
 	} else {
 		bridgedRequest = 1;
 
-		if(intf->transit_addr != ourAddress && intf->transit_addr != 0)
-		{
+		if(intf->transit_addr != ourAddress && intf->transit_addr != 0) {
 			bridgedRequest++;
 		}
+
 		/* bridged request: encapsulate w/in Send Message */
 		cs = len;
 		msg[len++] = IPMI_BMC_SLAVE_ADDR;
@@ -1375,16 +1321,15 @@
 		msg[len++] = IPMI_REMOTE_SWID;
 		msg[len++] = curr_seq << 2;
 
-		
 		msg[len++] = 0x34;			/* Send Message rqst */
 		if(bridgedRequest == 2)
 			msg[len++] = (0x40|intf->transit_channel); /* Track request*/
 		else
 			msg[len++] = (0x40|intf->target_channel);    /* Track request*/
-			
+
 		payload->payload_length += 7;
 		cs = len;
-		
+
 		if(bridgedRequest == 2)
 		{
 			/* bridged request: encapsulate w/in Send Message */
@@ -1405,18 +1350,19 @@
 		}
 	}
 
-        lprintf(LOG_DEBUG,"%s RqAddr %#x transit %#x:%#x target %#x:%#x "
+  lprintf(LOG_DEBUG,"%s RqAddr %#x transit %#x:%#x target %#x:%#x "
 		"bridgePossible %d",
 		bridgedRequest ? "Bridging" : "Local",
 		intf->my_addr, intf->transit_addr, intf->transit_channel,
 		intf->target_addr, intf->target_channel,
-		bridgePossible);
+		context->bridgePossible);
 
 	/* rsAddr */
-	if (bridgedRequest)
-		msg[len++] = intf->target_addr;
-	else
+	if (bridgedRequest) {
+    msg[len++] = intf->target_addr;
+  } else {
 		msg[len++] = IPMI_BMC_SLAVE_ADDR;
+  }
 
 	/* net Fn */
 	msg[len++] = req->msg.netfn << 2 | (req->msg.lun & 3);
@@ -1463,8 +1409,6 @@
 	}
 }
 
-
-
 /*
  * getSolPayloadWireRep
  *
@@ -1531,13 +1475,11 @@
 	payload->payload_length = payload->payload.sol_packet.character_count + 4;
 }
 
-
-
 /*
  * ipmi_lanplus_build_v2x_msg
  *
  * Encapsulates the payload data to create the IPMI v2.0 / RMCP+ packet.
- * 
+ *
  *
  * IPMI v2.0 LAN Request Message Format
  * +----------------------+
@@ -1588,7 +1530,6 @@
 	uint8_t * msg;
 	int len = 0;
 
-
 	len =
 		sizeof(rmcp)                +  // RMCP Header (4)
 		10                          +  // IPMI Session Header
@@ -1599,7 +1540,6 @@
 		1                           +  // Next Header
 		IPMI_MAX_AUTH_CODE_SIZE;       // Authcode
 
-
 	msg = malloc(len);
 	if (!msg) {
 		lprintf(LOG_ERR, "ipmitool: malloc failure");
@@ -1615,7 +1555,6 @@
 	memcpy(msg, &rmcp, sizeof(rmcp));
 	len = sizeof(rmcp);
 
-
 	/*
 	 *------------------------------------------
 	 * IPMI SESSION HEADER
@@ -1665,8 +1604,7 @@
 	 * 3) The confidentiality trailer
 	 *
 	 */
-	switch (payload->payload_type)
-	{
+	switch (payload->payload_type) {
 	case IPMI_PAYLOAD_TYPE_IPMI:
 		getIpmiPayloadWireRep(intf,
 							  payload,  /* in  */
@@ -1721,7 +1659,6 @@
 		break;
 	}
 
-
 	/*
 	 *------------------------------------------
 	 * ENCRYPT THE PAYLOAD IF NECESSARY
@@ -1730,12 +1667,13 @@
 	if (session->v2_data.session_state == LANPLUS_STATE_ACTIVE)
 	{
 		/* Payload len is adjusted as necessary by lanplus_encrypt_payload */
-		lanplus_encrypt_payload(session->v2_data.crypt_alg,        /* input  */
-								session->v2_data.k2,               /* input  */
-								msg + IPMI_LANPLUS_OFFSET_PAYLOAD, /* input  */
-								payload->payload_length,           /* input  */
-								msg + IPMI_LANPLUS_OFFSET_PAYLOAD, /* output */
-								&(payload->payload_length));       /* output */
+		lanplus_encrypt_payload(
+        session->v2_data.crypt_alg,        /* input  */
+				session->v2_data.k2,               /* input  */
+				msg + IPMI_LANPLUS_OFFSET_PAYLOAD, /* input  */
+				payload->payload_length,           /* input  */
+				msg + IPMI_LANPLUS_OFFSET_PAYLOAD, /* output */
+				&(payload->payload_length));       /* output */
 
 	}
 
@@ -1745,15 +1683,13 @@
 	msg[IPMI_LANPLUS_OFFSET_PAYLOAD_SIZE + 1] =
 		(payload->payload_length >> 8) & 0xff;
 
-
 	/*
 	 *------------------------------------------
 	 * SESSION TRAILER
 	 *------------------------------------------
 	 */
 	if ((session->v2_data.session_state == LANPLUS_STATE_ACTIVE) &&
-		(session->v2_data.integrity_alg != IPMI_INTEGRITY_NONE))
-	{
+		(session->v2_data.integrity_alg != IPMI_INTEGRITY_NONE)) {
 		uint32_t i;
 		uint32_t hmac_length;
 		uint32_t auth_length = 0;
@@ -1764,7 +1700,6 @@
 			IPMI_LANPLUS_OFFSET_PAYLOAD +
 			payload->payload_length;
 
-
 		/*
 		 * Determine the required integrity pad length.  We have to make the
 		 * data range covered by the authcode a multiple of 4.
@@ -1810,8 +1745,8 @@
 			2;
 
 		if (verbose > 2)
-			printbuf(msg + IPMI_LANPLUS_OFFSET_AUTHTYPE, hmac_input_size, "authcode input");
-
+			printbuf(msg + IPMI_LANPLUS_OFFSET_AUTHTYPE, hmac_input_size,
+               "authcode input");
 
 		/* Auth Code */
 		lanplus_HMAC(session->v2_data.integrity_alg,
@@ -1855,7 +1790,6 @@
 			                      */
 	}
 
-
 	++(session->out_seq);
 	if (!session->out_seq)
 		++(session->out_seq);
@@ -1867,8 +1801,6 @@
 	*msg_data = msg;
 }
 
-
-
 /*
  * ipmi_lanplus_build_v2x_ipmi_cmd
  *
@@ -1882,6 +1814,7 @@
 								struct ipmi_rq * req,
 								int isRetry)
 {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	struct ipmi_v2_payload v2_payload;
 	struct ipmi_rq_entry * entry;
 
@@ -1891,24 +1824,21 @@
 	 * know the sequence number when we generate our IPMI
 	 * representation far below.
 	 */
-	static uint8_t curr_seq = 0;
-
 	if( isRetry == 0 )
-		curr_seq += 1;
-
-	if (curr_seq >= 64)
-		curr_seq = 0;
+		context->curr_seq += 1;
 
+	if (context->curr_seq >= 64)
+		context->curr_seq = 0;
 
 	/* IPMI Message Header -- Figure 13-4 of the IPMI v2.0 spec */
-	if ((intf->target_addr == intf->my_addr) || (!bridgePossible)) {
-		entry = ipmi_req_add_entry(intf, req, curr_seq);
+	if ((intf->target_addr == intf->my_addr) || (!context->bridgePossible)) {
+		entry = ipmi_req_add_entry(intf, req, context->curr_seq);
 	/* it's a bridge command */
 	} else {
 		unsigned char backup_cmd;
 
 		/* Add entry for cmd */
-		entry = ipmi_req_add_entry(intf, req, curr_seq);
+		entry = ipmi_req_add_entry(intf, req, context->curr_seq);
 
 		if (entry) {
 			entry->req.msg.target_cmd = entry->req.msg.cmd;
@@ -1929,21 +1859,17 @@
 	v2_payload.payload_type                 = IPMI_PAYLOAD_TYPE_IPMI;
 	v2_payload.payload_length               = req->msg.data_len + 7;
 	v2_payload.payload.ipmi_request.request = req;
-	v2_payload.payload.ipmi_request.rq_seq  = curr_seq;
+	v2_payload.payload.ipmi_request.rq_seq  = context->curr_seq;
 
 	ipmi_lanplus_build_v2x_msg(intf,                // in
 					&v2_payload,         // in
 					&(entry->msg_len),   // out
 					&(entry->msg_data),  // out
-					curr_seq); 		// in
+					context->curr_seq);  // in
 
 	return entry;
 }
 
-
-
-
-
 /*
  * IPMI LAN Request Message Format
  * +--------------------+
@@ -2077,21 +2003,17 @@
 	return entry;
 }
 
-
-
 /*
  * is_sol_packet
  */
 static int
 is_sol_packet(struct ipmi_rs * rsp)
 {
-	return (rsp                                                           &&
-			(rsp->session.authtype    == IPMI_SESSION_AUTHTYPE_RMCP_PLUS) &&
+	return (rsp &&
+			(rsp->session.authtype == IPMI_SESSION_AUTHTYPE_RMCP_PLUS) &&
 			(rsp->session.payloadtype == IPMI_PAYLOAD_TYPE_SOL));
 }
 
-
-
 /*
  * sol_response_acks_packet
  */
@@ -2100,15 +2022,12 @@
 						 struct ipmi_rs         * rsp,
 						 struct ipmi_v2_payload * payload)
 {
-	return (is_sol_packet(rsp)                                            &&
-			payload                                                       &&
-			(payload->payload_type    == IPMI_PAYLOAD_TYPE_SOL)           && 
+	return (is_sol_packet(rsp) && payload &&
+			(payload->payload_type == IPMI_PAYLOAD_TYPE_SOL) &&
 			(rsp->payload.sol_packet.acked_packet_number ==
 			 payload->payload.sol_packet.packet_sequence_number));
 }
 
-
-
 /*
  * ipmi_lanplus_send_payload
  *
@@ -2118,23 +2037,28 @@
 						  struct ipmi_intf * intf,
 						  struct ipmi_v2_payload * payload)
 {
+  struct lanplus_context *context;
 	struct ipmi_rs      * rsp = NULL;
 	uint8_t             * msg_data = NULL;
 	int                   msg_length;
-	struct ipmi_session * session = intf->session;
+	struct ipmi_session * session;
 	struct ipmi_rq_entry * entry = NULL;
 	int                   try = 0;
 	int                   xmit = 1;
 	time_t                ltime;
 	uint32_t	      saved_timeout;
 
-	if (!intf->opened && intf->open && intf->open(intf) < 0)
+	if (!intf->opened && intf->open && intf->open(intf) < 0) {
 		return NULL;
+  }
+
+  context = (struct lanplus_context *) intf->context;
 
 	/*
 	 * The session timeout is initialized in the above interface open,
 	 * so it will only be valid after the open completes.
 	 */
+  session = intf->session;
 	saved_timeout = session->timeout;
 	while (try < intf->ssn_params.retry) {
 		//ltime = time(NULL);
@@ -2163,7 +2087,6 @@
 					fprintf(stderr, "\n\n");
 				}
 
-
 				/*
 				 * If we are presession, and the command is GET CHANNEL AUTHENTICATION
 				 * CAPABILITIES, we will build the command in v1.5 format.  This is so
@@ -2288,7 +2211,6 @@
 			break;
 		}
 
-
 		/*
 		 * Special case for SOL outbound packets.
 		 */
@@ -2341,7 +2263,7 @@
 				break;
 			/* This payload type is retryable for timeouts. */
 			if ((payload->payload_type == IPMI_PAYLOAD_TYPE_IPMI) && entry) {
-				ipmi_req_remove_entry( entry->rq_seq, entry->req.msg.cmd);
+				ipmi_req_remove_entry(intf, entry->rq_seq, entry->req.msg.cmd);
 			}
 		}
 
@@ -2373,8 +2295,6 @@
 	return rsp;
 }
 
-
-
 /*
  * is_sol_partial_ack
  *
@@ -2410,8 +2330,6 @@
 	return chars_to_resend;
 }
 
-
-
 /*
  * set_sol_packet_sequence_number
  */
@@ -2427,8 +2345,6 @@
 		intf->session->sol_data.sequence_number++;
 }
 
-
-
 /*
  * ipmi_lanplus_send_sol
  *
@@ -2501,8 +2417,6 @@
 	return rs;
 }
 
-
-
 /*
  * check_sol_packet_for_new_data
  *
@@ -2518,12 +2432,10 @@
  */
 static int
 check_sol_packet_for_new_data(
-							  struct ipmi_rs *rsp)
+    struct ipmi_intf *intf, struct ipmi_rs *rsp)
 {
-	static uint8_t last_received_sequence_number = 0;
-	static uint8_t last_received_byte_count      = 0;
-	int new_data_size                                  = 0;
-
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
+	int new_data_size = 0;
 
 	if (rsp &&
 		(rsp->session.authtype    == IPMI_SESSION_AUTHTYPE_RMCP_PLUS) &&
@@ -2533,14 +2445,14 @@
 		uint8_t unaltered_data_len = rsp->data_len;
 
 		if (rsp->payload.sol_packet.packet_sequence_number ==
-			last_received_sequence_number)
+        context->last_received_sequence_number)
 		{
 
 			/*
 			 * This is the same as the last packet, but may include
 			 * extra data
 			 */
-			new_data_size = rsp->data_len - last_received_byte_count;
+      new_data_size = rsp->data_len - context->last_received_byte_count;
 
 			if (new_data_size > 0)
 			{
@@ -2554,25 +2466,21 @@
 			rsp->data_len = new_data_size;
 		}
 
-
 		/*
 		 * Remember the data for next round
 		 */
 		if (rsp->payload.sol_packet.packet_sequence_number)
 		{
-			last_received_sequence_number =
-				rsp->payload.sol_packet.packet_sequence_number;
+      context->last_received_sequence_number =
+          rsp->payload.sol_packet.packet_sequence_number;
 
-			last_received_byte_count = unaltered_data_len;
+      context->last_received_byte_count = unaltered_data_len;
 		}
 	}
 
-
 	return new_data_size;
 }
 
-
-
 /*
  * ack_sol_packet
  *
@@ -2612,8 +2520,6 @@
 	}
 }
 
-
-
 /*
  * ipmi_lanplus_recv_sol
  *
@@ -2633,13 +2539,11 @@
 		 * Remembers the data sent, and alters the data to just
 		 * include the new stuff.
 		 */
-		check_sol_packet_for_new_data(rsp);
+		check_sol_packet_for_new_data(intf, rsp);
 	}
 	return rsp;
 }
 
-
-
 /**
  * ipmi_lanplus_send_ipmi_cmd
  *
@@ -2658,7 +2562,6 @@
 	return ipmi_lanplus_send_payload(intf, &v2_payload);
 }
 
-
 /*
  * ipmi_get_auth_capabilities_cmd
  *
@@ -2683,14 +2586,15 @@
 								struct ipmi_intf * intf,
 								struct get_channel_auth_cap_rsp * auth_cap)
 {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	struct ipmi_rs * rsp;
 	struct ipmi_rq req;
 	uint8_t msg_data[2];
 	uint8_t backupBridgePossible;
 
-	backupBridgePossible = bridgePossible;
+	backupBridgePossible = context->bridgePossible;
 
-	bridgePossible = 0;
+	context->bridgePossible = 0;
 
 	msg_data[0] = IPMI_LAN_CHANNEL_E | 0x80; // Ask for IPMI v2 data as well
 	msg_data[1] = intf->ssn_params.privlvl;
@@ -2723,21 +2627,19 @@
 		}
 	}
 
-
 	memcpy(auth_cap,
 			rsp->data,
 			sizeof(struct get_channel_auth_cap_rsp));
 
-	bridgePossible = backupBridgePossible;
+	context->bridgePossible = backupBridgePossible;
 
 	return 0;
 }
 
-
-
 static int
 ipmi_close_session_cmd(struct ipmi_intf * intf)
 {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	struct ipmi_rs * rsp;
 	struct ipmi_rq req;
 	uint8_t msg_data[4];
@@ -2747,10 +2649,10 @@
 			|| intf->session->v2_data.session_state != LANPLUS_STATE_ACTIVE)
 		return -1;
 
-	backupBridgePossible = bridgePossible;
+	backupBridgePossible = context->bridgePossible;
 
 	intf->target_addr = IPMI_BMC_SLAVE_ADDR;
-	bridgePossible = 0;
+	context->bridgePossible = 0;
 
 	htoipmi32(intf->session->v2_data.bmc_id, msg_data);
 
@@ -2784,13 +2686,11 @@
 	lprintf(LOG_DEBUG, "Closed Session %08lx\n",
 		(long)intf->session->v2_data.bmc_id);
 
-	bridgePossible = backupBridgePossible;
+	context->bridgePossible = backupBridgePossible;
 
 	return 0;
 }
 
-
-
 /*
  * ipmi_lanplus_open_session
  *
@@ -2807,7 +2707,6 @@
 	/* 0 = success, 1 = error, 2 = timeout */
 	int rc = 0;
 
-
 	/*
 	 * Build an Open Session Request Payload
 	 */
@@ -2834,7 +2733,6 @@
 	msg[6] = (session->v2_data.console_id >> 16) & 0xff;
 	msg[7] = (session->v2_data.console_id >> 24) & 0xff;
 
-
 	if (lanplus_get_requested_ciphers(intf->ssn_params.cipher_suite_id,
 									  &(session->v2_data.requested_auth_alg),
 									  &(session->v2_data.requested_integrity_alg),
@@ -2847,7 +2745,6 @@
 		return 1;
 	}
 
-
 	/*
 	 * Authentication payload
 	 */
@@ -2884,7 +2781,6 @@
 	msg[30] = 0; /* reserved */
 	msg[31] = 0; /* reserved */
 
-
 	v2_payload.payload_type   = IPMI_PAYLOAD_TYPE_RMCP_OPEN_REQUEST;
 	v2_payload.payload_length = IPMI_OPEN_SESSION_REQUEST_SIZE;
 	v2_payload.payload.open_session_request.request = msg;
@@ -2901,15 +2797,12 @@
 		lanplus_dump_open_session_response(rsp);
 
 	if (rsp->payload.open_session_response.rakp_return_code !=
-		IPMI_RAKP_STATUS_NO_ERRORS)
-	{
+		IPMI_RAKP_STATUS_NO_ERRORS) {
 		lprintf(LOG_WARNING, "Error in open session response message : %s\n",
 			val2str(rsp->payload.open_session_response.rakp_return_code,
 				ipmi_rakp_return_codes));
 		return 1;
-	}
-	else
-	{
+	} else {
 		if (rsp->payload.open_session_response.console_id !=
 			 session->v2_data.console_id) {
 			lprintf(LOG_WARNING, "Warning: Console session ID is not "
@@ -2929,7 +2822,6 @@
 		session->v2_data.session_state  =
 			LANPLUS_STATE_OPEN_SESSION_RECEIEVED;
 
-
 		/*
 		 * Verify that we have agreed on a cipher suite
 		 */
@@ -2966,8 +2858,6 @@
 	return rc;
 }
 
-
-
 /*
  * ipmi_lanplus_rakp1
  *
@@ -3004,7 +2894,6 @@
 	}
 	memset(msg, 0, IPMI_RAKP1_MESSAGE_SIZE);
 
-
 	msg[0] = 0; /* Message tag */
 
 	msg[1] = 0; /* reserved */
@@ -3017,7 +2906,6 @@
 	msg[6] = (session->v2_data.bmc_id >> 16) & 0xff;
 	msg[7] = (session->v2_data.bmc_id >> 24) & 0xff;
 
-
 	/* We need a 16 byte random number */
 	if (lanplus_rand(session->v2_data.console_rand, 16))
 	{
@@ -3035,7 +2923,6 @@
 		printbuf(session->v2_data.console_rand, 16,
 				 ">> Console generated random number");
 
-
 	/*
 	 * Requested maximum privilege level.
 	 */
@@ -3044,7 +2931,6 @@
 	msg[25] = 0; /* reserved */
 	msg[26] = 0; /* reserved */
 
-
 	/* Username specification */
 	msg[27] = strlen((const char *)intf->ssn_params.username);
 	if (msg[27] > IPMI_MAX_USER_NAME_LENGTH)
@@ -3129,8 +3015,6 @@
 	return rc;
 }
 
-
-
 /*
  * ipmi_lanplus_rakp3
  *
@@ -3167,7 +3051,6 @@
 	}
 	memset(msg, 0, IPMI_RAKP3_MESSAGE_MAX_SIZE);
 
-
 	msg[0] = 0; /* Message tag */
 	msg[1] = session->v2_data.rakp2_return_code;
 	
@@ -3234,7 +3117,6 @@
 			return 1;
 		}
 	}
-	
 
 	rsp = ipmi_lanplus_send_payload(intf, &v2_payload);
 
@@ -3256,7 +3138,6 @@
 		return 2;
 	}
 
-
 	/*
 	 * We have a RAKP 4 message to chew on.
 	 */
@@ -3294,8 +3175,6 @@
 	return 0;
 }
 
-
-
 /**
  * ipmi_lan_close
  */
@@ -3310,18 +3189,21 @@
 		intf->fd = -1;
 	}
 
-	ipmi_req_clear_entries();
-	ipmi_intf_session_cleanup(intf);
+  if (intf->context != NULL) {
+    ipmi_req_clear_entries(intf);
+    free(intf->context);
+    intf->context = NULL;
+  }
+  ipmi_intf_session_cleanup(intf);
 	intf->opened = 0;
 	intf->manufacturer_id = IPMI_OEM_UNKNOWN;
 	intf = NULL;
 }
 
-
-
 static int
 ipmi_set_session_privlvl_cmd(struct ipmi_intf * intf)
 {
+  struct lanplus_context *context = (struct lanplus_context *)intf->context;
 	struct ipmi_rs * rsp;
 	struct ipmi_rq req;
 	uint8_t backupBridgePossible;
@@ -3330,9 +3212,9 @@
 	if (privlvl <= IPMI_SESSION_PRIV_USER)
 		return 0;	/* no need to set higher */
 
-	backupBridgePossible = bridgePossible;
+	backupBridgePossible = context->bridgePossible;
 
-	bridgePossible = 0;
+	context->bridgePossible = 0;
 
 	memset(&req, 0, sizeof(req));
 	req.msg.netfn		= IPMI_NETFN_APP;
@@ -3344,7 +3226,7 @@
 	if (!rsp) {
 		lprintf(LOG_ERR, "Set Session Privilege Level to %s failed",
 			val2str(privlvl, ipmi_privlvl_vals));
-		bridgePossible = backupBridgePossible;
+		context->bridgePossible = backupBridgePossible;
 		return -1;
 	}
 	if (verbose > 2)
@@ -3354,14 +3236,14 @@
 		lprintf(LOG_ERR, "Set Session Privilege Level to %s failed: %s",
 			val2str(privlvl, ipmi_privlvl_vals),
 			val2str(rsp->ccode, completion_code_vals));
-		bridgePossible = backupBridgePossible;
+		context->bridgePossible = backupBridgePossible;
 		return -1;
 	}
 
 	lprintf(LOG_DEBUG, "Set Session Privilege Level to %s\n",
 		val2str(rsp->data[0], ipmi_privlvl_vals));
 
-	bridgePossible = backupBridgePossible;
+	context->bridgePossible = backupBridgePossible;
 
 	return 0;
 }
@@ -3428,6 +3310,7 @@
 int
 ipmi_lanplus_open(struct ipmi_intf * intf)
 {
+	struct lanplus_context *context;
 	int rc;
 	int retry;
 	struct get_channel_auth_cap_rsp auth_cap;
@@ -3440,8 +3323,11 @@
 	if (intf->opened)
 		return intf->fd;
 
-	params = &intf->ssn_params;
+	intf->context = malloc(sizeof(struct lanplus_context));
+	memset(intf->context, 0, sizeof(struct lanplus_context));
+	context = (struct lanplus_context *)intf->context;
 
+	params = &intf->ssn_params;
 	if (!params->port)
 		params->port = IPMI_LANPLUS_PORT;
 	if (!params->privlvl)
@@ -3453,7 +3339,7 @@
 
 	if (!params->hostname || strlen((const char *)params->hostname) == 0) {
 		lprintf(LOG_ERR, "No hostname specified!");
-		return -1;
+		goto fail;
 	}
 
 	if (ipmi_intf_socket_connect(intf) == -1) {
@@ -3564,7 +3450,7 @@
 		hpm2_detect_max_payload_size(intf);
 	}
 
-	bridgePossible = 1;
+	context->bridgePossible = 1;
 
 	if (!ipmi_oem_active(intf, "i82571spt")) {
 		intf->manufacturer_id = ipmi_get_oem(intf);
@@ -3627,8 +3513,6 @@
 	exit(0);
 }	
 
-
-
 void test_crypt2(void)
 {
 	uint8_t key[]  =
@@ -3666,7 +3550,6 @@
 	exit(0);
 }
 
-
 /**
  * send a get device id command to keep session active
  */
@@ -3689,7 +3572,7 @@
 					 /* rsp was SOL data instead of our answer */
 					 /* since it didn't go through the sol recv, do sol recv stuff here */
 					 ack_sol_packet(intf, rsp);
-					 check_sol_packet_for_new_data(rsp);
+					 check_sol_packet_for_new_data(intf, rsp);
 					 if (rsp->data_len)
 								intf->session->sol_data.sol_input_handler(rsp);
 		rsp = ipmi_lan_poll_recv(intf);
@@ -3703,26 +3586,27 @@
 	return 0;
 }
 
-
 /**
  * ipmi_lanplus_setup
  */
-static int ipmi_lanplus_setup(struct ipmi_intf * intf)
+static int
+ipmi_lanplus_setup(struct ipmi_intf * intf)
 {
-	//test_crypt1();
-	assert("ipmi_lanplus_setup");
+    //test_crypt1();
+    static_assert(true, "ipmi_lanplus_setup");
 
-	if (lanplus_seed_prng(16))
-		return -1;
+    if (lanplus_seed_prng(16))
+        return -1;
 
     /* setup default LAN maximum request and response sizes */
     intf->max_request_data_size = IPMI_LAN_MAX_REQUEST_SIZE;
     intf->max_response_data_size = IPMI_LAN_MAX_RESPONSE_SIZE;
 
-	return 0;
+    return 0;
 }
 
-static void ipmi_lanp_set_max_rq_data_size(struct ipmi_intf * intf, uint16_t size)
+static void
+ipmi_lanp_set_max_rq_data_size(struct ipmi_intf * intf, uint16_t size)
 {
 	if (intf->ssn_params.cipher_suite_id == IPMI_LANPLUS_CIPHER_SUITE_3) {
 		/*
@@ -3740,7 +3624,8 @@
 	intf->max_request_data_size = size;
 }
 
-static void ipmi_lanp_set_max_rp_data_size(struct ipmi_intf * intf, uint16_t size)
+static void
+ipmi_lanp_set_max_rp_data_size(struct ipmi_intf * intf, uint16_t size)
 {
 	if (intf->ssn_params.cipher_suite_id == IPMI_LANPLUS_CIPHER_SUITE_3) {
 		/*
