From 8a0c44c5915883b906985a8f0f6d526a1ccd7758 Mon Sep 17 00:00:00 2001
From: nanzhou <nanzhou@google.com>
Date: Tue, 29 Sep 2020 12:11:43 -0700
Subject: [PATCH] Add mTLS support

The default mode is http, for https:
1. if TLS is enabled, a certificate file, a private key are required.
2. if mTLS is enabled, an additional CA file is required.
certificate are required.

In real BmcWeb, Redfish root will be always available even if authentication
failed; to simplify the patch, we return errors on every Redfish path when
TlsAuth failed.

Signed-off-by: nanzhou <nanzhou@google.com>
---
 redfishMockupServer.py | 38 +++++++++++++++++++++++++++++++-------
 1 file changed, 31 insertions(+), 7 deletions(-)

diff --git a/redfishMockupServer.py b/redfishMockupServer.py
index 2bbc12e..3b4d0c3 100644
--- a/redfishMockupServer.py
+++ b/redfishMockupServer.py
@@ -718,10 +718,11 @@ def main():
                             help='delay in seconds added to responses (float or int)')
         parser.add_argument('-T', action='store_true',
                             help='delay response based on times in time.json files in mockup')
-        parser.add_argument('-s', '--ssl', action='store_true',
-                            help='place server in SSL (HTTPS) mode; requires a cert and key')
-        parser.add_argument('--cert', help='the certificate for SSL')
-        parser.add_argument('--key', help='the key for SSL')
+        parser.add_argument('-m', '--mode', choices=['http', 'tls', 'mtls'], default='http',
+                            help='place server in different SSL modes; tls mode requires a cert and a key; mtls requires a cert, a key, and a CA cert')
+        parser.add_argument('--cert', help='the certificate for TLS')
+        parser.add_argument('--key', help='the key for TLS')
+        parser.add_argument('--ca', help='the ca certificates for mutual TLS')
         parser.add_argument('-S', '--short-form', '--shortForm', action='store_true',
                             help='apply short form to mockup (omit filepath /redfish/v1)')
         parser.add_argument('-P', '--ssdp', action='store_true',
@@ -737,14 +738,23 @@ def main():
         headers = args.headers
         responseTime = args.time
         timefromJson = args.T
-        sslMode = args.ssl
+        sslMode = args.mode
         sslCert = args.cert
         sslKey = args.key
+        sslCA = args.ca
         shortForm = args.short_form
         ssdpStart = args.ssdp
         ipv6 = args.ipv6
         unix = args.unix

+        if sslMode == 'tls' and (sslKey is None or sslCert is None):
+            logger.critical('ERROR: For {} mode, please specify a cert and a key. Aborting'.format(sslMode))
+            sys.exit(1)
+
+        if sslMode == 'mtls' and (sslKey is None or sslCert is None or sslCA is None):
+            logger.critical('ERROR: For {} mode, please specify a cert, a key, and a CA. Aborting'.format(sslMode))
+            sys.exit(1)
+
         # check if mockup path was specified.  If not, use the built-in mockup
         if mockDirPath is None:
             mockDirPath = 'public-rackmount1'
@@ -783,9 +793,23 @@ def main():
         else:
             myServer = HTTPServer((hostname, port), RfMockupServer)

-        if sslMode:
+        if sslMode == 'tls' or sslMode == 'mtls':
             logger.info("Using SSL with certfile: {}".format(sslCert))
-            myServer.socket = ssl.wrap_socket(myServer.socket, certfile=sslCert, keyfile=sslKey, server_side=True)
+            logger.info("Using SSL with keyfile: {}".format(sslKey))
+            if sslMode == 'tls':
+                myServer.socket = ssl.wrap_socket(myServer.socket,
+                                                  certfile=sslCert,
+                                                  keyfile=sslKey,
+                                                  server_side=True,
+                                                  cert_reqs=ssl.CERT_NONE)
+            else:
+                logger.info("Using SSL with ca file: {}".format(sslCA))
+                myServer.socket = ssl.wrap_socket(myServer.socket,
+                                                  certfile=sslCert,
+                                                  keyfile=sslKey,
+                                                  server_side=True,
+                                                  cert_reqs=ssl.CERT_REQUIRED,
+                                                  ca_certs=sslCA)

         # save the test flag, and real path to the mockup dir for the handler to use
         myServer.mockDir = mockDir
--
2.31.1.498.g6c1eba8ee3d-goog

